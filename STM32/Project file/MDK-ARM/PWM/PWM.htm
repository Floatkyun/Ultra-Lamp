<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [PWM\PWM.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image PWM\PWM.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6120001: Last Updated: Thu Aug  8 19:54:06 2024
<BR><P>
<H3>Maximum Stack Usage =       1048 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
lv_chart_event &rArr; draw_y_ticks &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[195]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">ADC_IRQHandler</a><BR>
 <LI><a href="#[15]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">BusFault_Handler</a><BR>
 <LI><a href="#[14]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">MemManage_Handler</a><BR>
 <LI><a href="#[12]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">NMI_Handler</a><BR>
 <LI><a href="#[3a2]">lv_obj_transform_point</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a2]">lv_obj_transform_point</a><BR>
 <LI><a href="#[2d5]">event_send_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d5]">event_send_core</a><BR>
 <LI><a href="#[3f6]">refresh_children_style</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f6]">refresh_children_style</a><BR>
 <LI><a href="#[16]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">UsageFault_Handler</a><BR>
 <LI><a href="#[268]">lv_obj_move_children_by</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[268]">lv_obj_move_children_by</a><BR>
 <LI><a href="#[3fc]">lv_obj_scroll_by_bounded</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[232]">lv_obj_update_layout</a><BR>
 <LI><a href="#[307]">layout_update_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[307]">layout_update_core</a><BR>
 <LI><a href="#[3f4]">lv_obj_redraw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f5]">refr_obj</a><BR>
 <LI><a href="#[430]">lv_refr_get_top_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[430]">lv_refr_get_top_obj</a><BR>
 <LI><a href="#[2f6]">lv_indev_search_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f6]">lv_indev_search_obj</a><BR>
 <LI><a href="#[3aa]">lv_textarea_add_text</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3aa]">lv_textarea_add_text</a><BR>
 <LI><a href="#[3ab]">lv_textarea_add_char</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3aa]">lv_textarea_add_text</a><BR>
 <LI><a href="#[3f2]">obj_valid_child</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f2]">obj_valid_child</a><BR>
 <LI><a href="#[27c]">_vsnprintf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27c]">_vsnprintf</a><BR>
 <LI><a href="#[290]">apply_theme</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[290]">apply_theme</a><BR>
 <LI><a href="#[3dd]">lv_obj_construct</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3dd]">lv_obj_construct</a><BR>
 <LI><a href="#[3e0]">obj_del_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e0]">obj_del_core</a><BR>
 <LI><a href="#[3fb]">report_style_change_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3fb]">report_style_change_core</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">BusFault_Handler</a> from stm32f4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream0_IRQHandler</a> from stm32f4xx_it.o(.text.DMA1_Stream0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream5_IRQHandler</a> from stm32f4xx_it.o(.text.DMA1_Stream5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DebugMon_Handler</a> from stm32f4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6b]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6a]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">HardFault_Handler</a> from stm32f4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">MemManage_Handler</a> from stm32f4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">NMI_Handler</a> from stm32f4xx_it.o(.text.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">PendSV_Handler</a> from stm32f4xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">RTC_WKUP_IRQHandler</a> from stm32f4xx_it.o(.text.RTC_WKUP_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">SVC_Handler</a> from stm32f4xx_it.o(.text.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">SysTick_Handler</a> from stm32f4xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6c]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[1d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM2_IRQHandler</a> from stm32f4xx_it.o(.text.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM3_IRQHandler</a> from stm32f4xx_it.o(.text.TIM3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">TIM4_IRQHandler</a> from stm32f4xx_it.o(.text.TIM4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">TIM8_BRK_TIM12_IRQHandler</a> from stm32f4xx_it.o(.text.TIM8_BRK_TIM12_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[72]">TIM_DMADelayPulseCplt</a> from stm32f4xx_hal_tim.o(.text.TIM_DMADelayPulseCplt) referenced 8 times from stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start_DMA)
 <LI><a href="#[73]">TIM_DMADelayPulseHalfCplt</a> from stm32f4xx_hal_tim.o(.text.TIM_DMADelayPulseHalfCplt) referenced 8 times from stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start_DMA)
 <LI><a href="#[74]">TIM_DMAError</a> from stm32f4xx_hal_tim.o(.text.TIM_DMAError) referenced 8 times from stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start_DMA)
 <LI><a href="#[4f]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[75]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[76]">UART_DMAError</a> from stm32f4xx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_Receive_DMA)
 <LI><a href="#[78]">UART_DMAReceiveCplt</a> from stm32f4xx_hal_uart.o(.text.UART_DMAReceiveCplt) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_Receive_DMA)
 <LI><a href="#[77]">UART_DMARxHalfCplt</a> from stm32f4xx_hal_uart.o(.text.UART_DMARxHalfCplt) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_Receive_DMA)
 <LI><a href="#[40]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">USART2_IRQHandler</a> from stm32f4xx_it.o(.text.USART2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">UsageFault_Handler</a> from stm32f4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6d]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[b2]">_lv_disp_refr_timer</a> from lv_refr.o(.text._lv_disp_refr_timer) referenced 2 times from lv_hal_disp.o(.text.lv_disp_drv_register)
 <LI><a href="#[dc]">_out_buffer</a> from lv_printf.o(.text._out_buffer) referenced 2 times from lv_printf.o(.text.lv_snprintf)
 <LI><a href="#[dc]">_out_buffer</a> from lv_printf.o(.text._out_buffer) referenced 2 times from lv_printf.o(.text.lv_vsnprintf)
 <LI><a href="#[81]">_out_null</a> from lv_printf.o(.text._out_null) referenced 2 times from lv_printf.o(.text._vsnprintf)
 <LI><a href="#[70]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[6f]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[6e]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[79]">anim_timer</a> from lv_anim.o(.text.anim_timer) referenced 2 times from lv_anim.o(.text._lv_anim_core_init)
 <LI><a href="#[dd]">arc_anim_end_angle</a> from lv_spinner.o(.text.arc_anim_end_angle) referenced 2 times from lv_spinner.o(.text.lv_spinner_constructor)
 <LI><a href="#[df]">arc_anim_start_angle</a> from lv_spinner.o(.text.arc_anim_start_angle) referenced 2 times from lv_spinner.o(.text.lv_spinner_constructor)
 <LI><a href="#[f8]">array_f32_identity</a> from layers_rnn_generic_float.o(i.array_f32_identity) referenced from layers_rnn_generic_float.o(i.forward_lstm)
 <LI><a href="#[88]">book_counter</a> from work_detector.o(.text.book_counter) referenced 2 times from work_detector.o(.text.detector_init)
 <LI><a href="#[e2]">btns_value_changed_event_cb</a> from lv_tabview.o(.text.btns_value_changed_event_cb) referenced 2 times from lv_tabview.o(.text.lv_tabview_constructor)
 <LI><a href="#[f9]">color_blend_true_color_additive</a> from lv_draw_sw_blend.o(.text.color_blend_true_color_additive) referenced from lv_draw_sw_blend.o(.rodata..Lswitch.table.lv_draw_sw_blend_basic.4)
 <LI><a href="#[fb]">color_blend_true_color_multiply</a> from lv_draw_sw_blend.o(.text.color_blend_true_color_multiply) referenced from lv_draw_sw_blend.o(.rodata..Lswitch.table.lv_draw_sw_blend_basic.4)
 <LI><a href="#[fa]">color_blend_true_color_subtractive</a> from lv_draw_sw_blend.o(.text.color_blend_true_color_subtractive) referenced from lv_draw_sw_blend.o(.rodata..Lswitch.table.lv_draw_sw_blend_basic.4)
 <LI><a href="#[86]">compu_counter</a> from work_detector.o(.text.compu_counter) referenced 2 times from work_detector.o(.text.detector_init)
 <LI><a href="#[e3]">cont_scroll_end_event_cb</a> from lv_tabview.o(.text.cont_scroll_end_event_cb) referenced 2 times from lv_tabview.o(.text.lv_tabview_constructor)
 <LI><a href="#[a9]">cursor_blink_anim_cb</a> from lv_textarea.o(.text.cursor_blink_anim_cb) referenced 4 times from lv_textarea.o(.text.label_event_cb)
 <LI><a href="#[a9]">cursor_blink_anim_cb</a> from lv_textarea.o(.text.cursor_blink_anim_cb) referenced 4 times from lv_textarea.o(.text.lv_textarea_constructor)
 <LI><a href="#[a9]">cursor_blink_anim_cb</a> from lv_textarea.o(.text.cursor_blink_anim_cb) referenced 4 times from lv_textarea.o(.text.lv_textarea_event)
 <LI><a href="#[a9]">cursor_blink_anim_cb</a> from lv_textarea.o(.text.cursor_blink_anim_cb) referenced 4 times from lv_textarea.o(.text.lv_textarea_set_cursor_pos)
 <LI><a href="#[f7]">dark_color_filter_cb</a> from lv_theme_default.o(.text.dark_color_filter_cb) referenced 2 times from lv_theme_default.o(.text.style_init)
 <LI><a href="#[d4]">disp_flush</a> from lv_port_disp.o(.text.disp_flush) referenced 2 times from lv_port_disp.o(.text.lv_port_disp_init)
 <LI><a href="#[b0]">draw_part_begin_event_cb</a> from lv_calendar.o(.text.draw_part_begin_event_cb) referenced 2 times from lv_calendar.o(.text.lv_calendar_constructor)
 <LI><a href="#[8b]">drink_count_analyser</a> from work_detector.o(.text.drink_count_analyser) referenced 2 times from work_detector.o(.text.detector_init)
 <LI><a href="#[c5]">flex_update</a> from lv_flex.o(.text.flex_update) referenced 2 times from lv_flex.o(.text.lv_flex_init)
 <LI><a href="#[7]">forward_dense</a> from layers_conv2d_generic_float.o(i.forward_dense) referenced 2 times from room_state_fcn.o(.data.gemm_0_layer)
 <LI><a href="#[7]">forward_dense</a> from layers_conv2d_generic_float.o(i.forward_dense) referenced 4 times from room_temp_rnn.o(.data.gemm_2_layer)
 <LI><a href="#[7]">forward_dense</a> from layers_conv2d_generic_float.o(i.forward_dense) referenced 2 times from room_state_fcn.o(.data.gemm_4_layer)
 <LI><a href="#[7]">forward_dense</a> from layers_conv2d_generic_float.o(i.forward_dense) referenced 2 times from room_state_fcn.o(.data.gemm_6_layer)
 <LI><a href="#[d]">forward_gather</a> from layers_generic_float.o(i.forward_gather) referenced 2 times from room_temp_rnn.o(.data.slice_1_gather_0_layer)
 <LI><a href="#[b]">forward_gelu</a> from layers_nl_generic_float.o(i.forward_gelu) referenced 2 times from room_state_fcn.o(.data.nl_1_layer)
 <LI><a href="#[b]">forward_gelu</a> from layers_nl_generic_float.o(i.forward_gelu) referenced 2 times from room_state_fcn.o(.data.nl_3_layer)
 <LI><a href="#[b]">forward_gelu</a> from layers_nl_generic_float.o(i.forward_gelu) referenced 2 times from room_state_fcn.o(.data.nl_5_layer)
 <LI><a href="#[8]">forward_lstm</a> from layers_rnn_generic_float.o(i.forward_lstm) referenced 2 times from room_temp_rnn.o(.data.lstm_0_layer)
 <LI><a href="#[c]">forward_sm</a> from layers_nl_generic_float.o(i.forward_sm) referenced 2 times from room_state_fcn.o(.data.nl_7_layer)
 <LI><a href="#[71]">fputc</a> from usart.o(.text.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[8a]">game_count_analyser</a> from work_detector.o(.text.game_count_analyser) referenced 2 times from work_detector.o(.text.detector_init)
 <LI><a href="#[87]">game_counter</a> from work_detector.o(.text.game_counter) referenced 2 times from work_detector.o(.text.detector_init)
 <LI><a href="#[93]">game_to_lvgl_bar</a> from work_detector.o(.text.game_to_lvgl_bar) referenced 2 times from work_detector.o(.text.detector_init)
 <LI><a href="#[f6]">grey_filter_cb</a> from lv_theme_default.o(.text.grey_filter_cb) referenced 2 times from lv_theme_default.o(.text.style_init)
 <LI><a href="#[c8]">grid_update</a> from lv_grid.o(.text.grid_update) referenced 2 times from lv_grid.o(.text.lv_grid_init)
 <LI><a href="#[90]">increase_game_game</a> from work_detector.o(.text.increase_game_game) referenced 2 times from work_detector.o(.text.detector_init)
 <LI><a href="#[92]">increase_game_work</a> from work_detector.o(.text.increase_game_work) referenced 2 times from work_detector.o(.text.detector_init)
 <LI><a href="#[91]">increase_work_game</a> from work_detector.o(.text.increase_work_game) referenced 2 times from work_detector.o(.text.detector_init)
 <LI><a href="#[95]">increase_work_work</a> from work_detector.o(.text.increase_work_work) referenced 2 times from work_detector.o(.text.detector_init)
 <LI><a href="#[c7]">kern_pair_16_compare</a> from lv_font_fmt_txt.o(.text.kern_pair_16_compare) referenced 2 times from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
 <LI><a href="#[c6]">kern_pair_8_compare</a> from lv_font_fmt_txt.o(.text.kern_pair_8_compare) referenced 2 times from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
 <LI><a href="#[e6]">label_event_cb</a> from lv_textarea.o(.text.label_event_cb) referenced 2 times from lv_textarea.o(.text.lv_textarea_constructor)
 <LI><a href="#[de]">lv_anim_path_ease_in_out</a> from lv_anim.o(.text.lv_anim_path_ease_in_out) referenced 2 times from lv_spinner.o(.text.lv_spinner_constructor)
 <LI><a href="#[d3]">lv_anim_path_ease_out</a> from lv_anim.o(.text.lv_anim_path_ease_out) referenced 4 times from lv_obj_scroll.o(.text.lv_obj_scroll_by)
 <LI><a href="#[d3]">lv_anim_path_ease_out</a> from lv_anim.o(.text.lv_anim_path_ease_out) referenced 2 times from lv_roller.o(.text.refr_position)
 <LI><a href="#[ab]">lv_anim_path_linear</a> from lv_anim.o(.text.lv_anim_path_linear) referenced 2 times from lv_anim.o(.text.lv_anim_init)
 <LI><a href="#[ab]">lv_anim_path_linear</a> from lv_anim.o(.text.lv_anim_path_linear) referenced 2 times from lv_style.o(.text.lv_style_transition_dsc_init)
 <LI><a href="#[ab]">lv_anim_path_linear</a> from lv_anim.o(.text.lv_anim_path_linear) referenced 2 times from lv_theme_default.o(.text.style_init)
 <LI><a href="#[aa]">lv_anim_path_step</a> from lv_anim.o(.text.lv_anim_path_step) referenced 2 times from lv_textarea.o(.text.label_event_cb)
 <LI><a href="#[aa]">lv_anim_path_step</a> from lv_anim.o(.text.lv_anim_path_step) referenced 2 times from lv_textarea.o(.text.lv_textarea_add_char)
 <LI><a href="#[aa]">lv_anim_path_step</a> from lv_anim.o(.text.lv_anim_path_step) referenced 2 times from lv_textarea.o(.text.lv_textarea_add_text)
 <LI><a href="#[aa]">lv_anim_path_step</a> from lv_anim.o(.text.lv_anim_path_step) referenced 2 times from lv_textarea.o(.text.lv_textarea_constructor)
 <LI><a href="#[aa]">lv_anim_path_step</a> from lv_anim.o(.text.lv_anim_path_step) referenced 2 times from lv_textarea.o(.text.lv_textarea_event)
 <LI><a href="#[aa]">lv_anim_path_step</a> from lv_anim.o(.text.lv_anim_path_step) referenced 2 times from lv_textarea.o(.text.lv_textarea_set_cursor_pos)
 <LI><a href="#[aa]">lv_anim_path_step</a> from lv_anim.o(.text.lv_anim_path_step) referenced 2 times from lv_textarea.o(.text.lv_textarea_set_text)
 <LI><a href="#[fc]">lv_arc_constructor</a> from lv_arc.o(.text.lv_arc_constructor) referenced from lv_arc.o(.rodata.lv_arc_class)
 <LI><a href="#[fd]">lv_arc_event</a> from lv_arc.o(.text.lv_arc_event) referenced from lv_arc.o(.rodata.lv_arc_class)
 <LI><a href="#[82]">lv_area_get_height</a> from lv_flex.o(.text.lv_area_get_height) referenced 2 times from lv_flex.o(.text.children_repos)
 <LI><a href="#[ad]">lv_area_get_height</a> from lv_bar.o(.text.lv_area_get_height) referenced 2 times from lv_bar.o(.text.lv_bar_event)
 <LI><a href="#[83]">lv_area_get_width</a> from lv_flex.o(.text.lv_area_get_width) referenced 2 times from lv_flex.o(.text.children_repos)
 <LI><a href="#[ac]">lv_area_get_width</a> from lv_bar.o(.text.lv_area_get_width) referenced 2 times from lv_bar.o(.text.lv_bar_event)
 <LI><a href="#[84]">lv_area_set_height</a> from lv_area.o(.text.lv_area_set_height) referenced 2 times from lv_flex.o(.text.children_repos)
 <LI><a href="#[85]">lv_area_set_width</a> from lv_area.o(.text.lv_area_set_width) referenced 2 times from lv_flex.o(.text.children_repos)
 <LI><a href="#[ae]">lv_bar_anim</a> from lv_bar.o(.text.lv_bar_anim) referenced 2 times from lv_bar.o(.text.lv_bar_set_value_with_anim)
 <LI><a href="#[af]">lv_bar_anim_ready</a> from lv_bar.o(.text.lv_bar_anim_ready) referenced 2 times from lv_bar.o(.text.lv_bar_set_value_with_anim)
 <LI><a href="#[fe]">lv_bar_constructor</a> from lv_bar.o(.text.lv_bar_constructor) referenced from lv_bar.o(.rodata.lv_bar_class)
 <LI><a href="#[ff]">lv_bar_destructor</a> from lv_bar.o(.text.lv_bar_destructor) referenced from lv_bar.o(.rodata.lv_bar_class)
 <LI><a href="#[100]">lv_bar_event</a> from lv_bar.o(.text.lv_bar_event) referenced from lv_bar.o(.rodata.lv_bar_class)
 <LI><a href="#[101]">lv_btn_constructor</a> from lv_btn.o(.text.lv_btn_constructor) referenced from lv_btn.o(.rodata.lv_btn_class)
 <LI><a href="#[102]">lv_btnmatrix_constructor</a> from lv_btnmatrix.o(.text.lv_btnmatrix_constructor) referenced from lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
 <LI><a href="#[103]">lv_btnmatrix_destructor</a> from lv_btnmatrix.o(.text.lv_btnmatrix_destructor) referenced from lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
 <LI><a href="#[104]">lv_btnmatrix_event</a> from lv_btnmatrix.o(.text.lv_btnmatrix_event) referenced from lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
 <LI><a href="#[105]">lv_calendar_constructor</a> from lv_calendar.o(.text.lv_calendar_constructor) referenced from lv_calendar.o(.rodata.lv_calendar_class)
 <LI><a href="#[108]">lv_chart_constructor</a> from lv_chart.o(.text.lv_chart_constructor) referenced from lv_chart.o(.rodata.lv_chart_class)
 <LI><a href="#[109]">lv_chart_destructor</a> from lv_chart.o(.text.lv_chart_destructor) referenced from lv_chart.o(.rodata.lv_chart_class)
 <LI><a href="#[10a]">lv_chart_event</a> from lv_chart.o(.text.lv_chart_event) referenced from lv_chart.o(.rodata.lv_chart_class)
 <LI><a href="#[10b]">lv_checkbox_constructor</a> from lv_checkbox.o(.text.lv_checkbox_constructor) referenced from lv_checkbox.o(.rodata.lv_checkbox_class)
 <LI><a href="#[10c]">lv_checkbox_destructor</a> from lv_checkbox.o(.text.lv_checkbox_destructor) referenced from lv_checkbox.o(.rodata.lv_checkbox_class)
 <LI><a href="#[10d]">lv_checkbox_event</a> from lv_checkbox.o(.text.lv_checkbox_event) referenced from lv_checkbox.o(.rodata.lv_checkbox_class)
 <LI><a href="#[10e]">lv_colorwheel_constructor</a> from lv_colorwheel.o(.text.lv_colorwheel_constructor) referenced from lv_colorwheel.o(.rodata.lv_colorwheel_class)
 <LI><a href="#[10f]">lv_colorwheel_event</a> from lv_colorwheel.o(.text.lv_colorwheel_event) referenced from lv_colorwheel.o(.rodata.lv_colorwheel_class)
 <LI><a href="#[110]">lv_dclock_constructor</a> from lv_dclock.o(.text.lv_dclock_constructor) referenced from lv_dclock.o(.rodata.lv_dclock_class)
 <LI><a href="#[111]">lv_dclock_destructor</a> from lv_dclock.o(.text.lv_dclock_destructor) referenced from lv_dclock.o(.rodata.lv_dclock_class)
 <LI><a href="#[112]">lv_dclock_event</a> from lv_dclock.o(.text.lv_dclock_event) referenced from lv_dclock.o(.rodata.lv_dclock_class)
 <LI><a href="#[b3]">lv_draw_mask_angle</a> from lv_draw_mask.o(.text.lv_draw_mask_angle) referenced 2 times from lv_draw_mask.o(.text.lv_draw_mask_angle_init)
 <LI><a href="#[b4]">lv_draw_mask_line</a> from lv_draw_mask.o(.text.lv_draw_mask_line) referenced 2 times from lv_draw_mask.o(.text.lv_draw_mask_line_points_init)
 <LI><a href="#[b5]">lv_draw_mask_radius</a> from lv_draw_mask.o(.text.lv_draw_mask_radius) referenced 2 times from lv_draw_mask.o(.text.lv_draw_mask_radius_init)
 <LI><a href="#[be]">lv_draw_sw_arc</a> from lv_draw_sw_arc.o(.text.lv_draw_sw_arc) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[b8]">lv_draw_sw_bg</a> from lv_draw_sw_rect.o(.text.lv_draw_sw_bg) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[b7]">lv_draw_sw_blend_basic</a> from lv_draw_sw_blend.o(.text.lv_draw_sw_blend_basic) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[bd]">lv_draw_sw_buffer_copy</a> from lv_draw_sw.o(.text.lv_draw_sw_buffer_copy) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[c4]">lv_draw_sw_img_decoded</a> from lv_draw_sw_img.o(.text.lv_draw_sw_img_decoded) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[b1]">lv_draw_sw_init_ctx</a> from lv_draw_sw.o(.text.lv_draw_sw_init_ctx) referenced 2 times from lv_hal_disp.o(.text.lv_disp_drv_init)
 <LI><a href="#[c2]">lv_draw_sw_layer_adjust</a> from lv_draw_sw_layer.o(.text.lv_draw_sw_layer_adjust) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[c1]">lv_draw_sw_layer_blend</a> from lv_draw_sw_layer.o(.text.lv_draw_sw_layer_blend) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[c3]">lv_draw_sw_layer_create</a> from lv_draw_sw_layer.o(.text.lv_draw_sw_layer_create) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[bf]">lv_draw_sw_layer_destroy</a> from lv_draw_sw_layer.o(.text.lv_draw_sw_layer_destroy) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[b9]">lv_draw_sw_letter</a> from lv_draw_sw_letter.o(.text.lv_draw_sw_letter) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[bc]">lv_draw_sw_line</a> from lv_draw_sw_line.o(.text.lv_draw_sw_line) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[bb]">lv_draw_sw_polygon</a> from lv_draw_sw_polygon.o(.text.lv_draw_sw_polygon) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[b6]">lv_draw_sw_rect</a> from lv_draw_sw_rect.o(.text.lv_draw_sw_rect) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[c0]">lv_draw_sw_transform</a> from lv_draw_sw_transform.o(.text.lv_draw_sw_transform) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[ba]">lv_draw_sw_wait_for_finish</a> from lv_draw_sw.o(.text.lv_draw_sw_wait_for_finish) referenced 2 times from lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
 <LI><a href="#[113]">lv_dropdown_constructor</a> from lv_dropdown.o(.text.lv_dropdown_constructor) referenced from lv_dropdown.o(.rodata.lv_dropdown_class)
 <LI><a href="#[114]">lv_dropdown_destructor</a> from lv_dropdown.o(.text.lv_dropdown_destructor) referenced from lv_dropdown.o(.rodata.lv_dropdown_class)
 <LI><a href="#[115]">lv_dropdown_event</a> from lv_dropdown.o(.text.lv_dropdown_event) referenced from lv_dropdown.o(.rodata.lv_dropdown_class)
 <LI><a href="#[118]">lv_dropdown_list_event</a> from lv_dropdown.o(.text.lv_dropdown_list_event) referenced from lv_dropdown.o(.rodata.lv_dropdownlist_class)
 <LI><a href="#[116]">lv_dropdownlist_constructor</a> from lv_dropdown.o(.text.lv_dropdownlist_constructor) referenced from lv_dropdown.o(.rodata.lv_dropdownlist_class)
 <LI><a href="#[117]">lv_dropdownlist_destructor</a> from lv_dropdown.o(.text.lv_dropdownlist_destructor) referenced from lv_dropdown.o(.rodata.lv_dropdownlist_class)
 <LI><a href="#[11a]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_mi_lanting_regular_12.o(.rodata.lv_font_MI_LanTing_Regular_12)
 <LI><a href="#[11a]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_mi_lanting_regular_15.o(.rodata.lv_font_MI_LanTing_Regular_15)
 <LI><a href="#[11a]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_mi_lanting_regular_16.o(.rodata.lv_font_MI_LanTing_Regular_16)
 <LI><a href="#[11a]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_mi_lanting_regular_18.o(.rodata.lv_font_MI_LanTing_Regular_18)
 <LI><a href="#[11a]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_mi_lanting_regular_24.o(.rodata.lv_font_MI_LanTing_Regular_24)
 <LI><a href="#[11a]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_mi_lanting_regular_28.o(.rodata.lv_font_MI_LanTing_Regular_28)
 <LI><a href="#[11a]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_mi_lanting_regular_30.o(.rodata.lv_font_MI_LanTing_Regular_30)
 <LI><a href="#[11a]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_montserratmedium_14.o(.rodata.lv_font_montserratMedium_14)
 <LI><a href="#[11a]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_montserratmedium_15.o(.rodata.lv_font_montserratMedium_15)
 <LI><a href="#[11a]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_montserratmedium_20.o(.rodata.lv_font_montserratMedium_20)
 <LI><a href="#[11a]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
 <LI><a href="#[119]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_mi_lanting_regular_12.o(.rodata.lv_font_MI_LanTing_Regular_12)
 <LI><a href="#[119]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_mi_lanting_regular_15.o(.rodata.lv_font_MI_LanTing_Regular_15)
 <LI><a href="#[119]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_mi_lanting_regular_16.o(.rodata.lv_font_MI_LanTing_Regular_16)
 <LI><a href="#[119]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_mi_lanting_regular_18.o(.rodata.lv_font_MI_LanTing_Regular_18)
 <LI><a href="#[119]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_mi_lanting_regular_24.o(.rodata.lv_font_MI_LanTing_Regular_24)
 <LI><a href="#[119]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_mi_lanting_regular_28.o(.rodata.lv_font_MI_LanTing_Regular_28)
 <LI><a href="#[119]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_mi_lanting_regular_30.o(.rodata.lv_font_MI_LanTing_Regular_30)
 <LI><a href="#[119]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_montserratmedium_14.o(.rodata.lv_font_montserratMedium_14)
 <LI><a href="#[119]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_montserratmedium_15.o(.rodata.lv_font_montserratMedium_15)
 <LI><a href="#[119]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_montserratmedium_20.o(.rodata.lv_font_montserratMedium_20)
 <LI><a href="#[119]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
 <LI><a href="#[11b]">lv_img_constructor</a> from lv_img.o(.text.lv_img_constructor) referenced from lv_img.o(.rodata.lv_img_class)
 <LI><a href="#[7a]">lv_img_decoder_built_in_close</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_close) referenced 2 times from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[7d]">lv_img_decoder_built_in_info</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_info) referenced 2 times from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[7c]">lv_img_decoder_built_in_open</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_open) referenced 2 times from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[7b]">lv_img_decoder_built_in_read_line</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_read_line) referenced 2 times from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[11c]">lv_img_destructor</a> from lv_img.o(.text.lv_img_destructor) referenced from lv_img.o(.rodata.lv_img_class)
 <LI><a href="#[11d]">lv_img_event</a> from lv_img.o(.text.lv_img_event) referenced from lv_img.o(.rodata.lv_img_class)
 <LI><a href="#[c9]">lv_indev_read_timer_cb</a> from lv_indev.o(.text.lv_indev_read_timer_cb) referenced 2 times from lv_hal_indev.o(.text.lv_indev_drv_register)
 <LI><a href="#[11e]">lv_keyboard_constructor</a> from lv_keyboard.o(.text.lv_keyboard_constructor) referenced from lv_keyboard.o(.rodata.lv_keyboard_class)
 <LI><a href="#[ca]">lv_keyboard_def_event_cb</a> from lv_keyboard.o(.text.lv_keyboard_def_event_cb) referenced 2 times from lv_keyboard.o(.text.lv_keyboard_constructor)
 <LI><a href="#[11f]">lv_label_constructor</a> from lv_label.o(.text.lv_label_constructor) referenced from lv_label.o(.rodata.lv_label_class)
 <LI><a href="#[120]">lv_label_destructor</a> from lv_label.o(.text.lv_label_destructor) referenced from lv_label.o(.rodata.lv_label_class)
 <LI><a href="#[121]">lv_label_event</a> from lv_label.o(.text.lv_label_event) referenced from lv_label.o(.rodata.lv_label_class)
 <LI><a href="#[122]">lv_led_constructor</a> from lv_led.o(.text.lv_led_constructor) referenced from lv_led.o(.rodata.lv_led_class)
 <LI><a href="#[123]">lv_led_event</a> from lv_led.o(.text.lv_led_event) referenced from lv_led.o(.rodata.lv_led_class)
 <LI><a href="#[124]">lv_line_constructor</a> from lv_line.o(.text.lv_line_constructor) referenced from lv_line.o(.rodata.lv_line_class)
 <LI><a href="#[125]">lv_line_event</a> from lv_line.o(.text.lv_line_event) referenced from lv_line.o(.rodata.lv_line_class)
 <LI><a href="#[cd]">lv_menu_back_event_cb</a> from lv_menu.o(.text.lv_menu_back_event_cb) referenced 2 times from lv_menu.o(.text.lv_menu_constructor)
 <LI><a href="#[126]">lv_menu_constructor</a> from lv_menu.o(.text.lv_menu_constructor) referenced from lv_menu.o(.rodata.lv_menu_class)
 <LI><a href="#[128]">lv_menu_cont_constructor</a> from lv_menu.o(.text.lv_menu_cont_constructor) referenced from lv_menu.o(.rodata.lv_menu_cont_class)
 <LI><a href="#[127]">lv_menu_destructor</a> from lv_menu.o(.text.lv_menu_destructor) referenced from lv_menu.o(.rodata.lv_menu_class)
 <LI><a href="#[129]">lv_menu_page_constructor</a> from lv_menu.o(.text.lv_menu_page_constructor) referenced from lv_menu.o(.rodata.lv_menu_page_class)
 <LI><a href="#[12a]">lv_menu_page_destructor</a> from lv_menu.o(.text.lv_menu_page_destructor) referenced from lv_menu.o(.rodata.lv_menu_page_class)
 <LI><a href="#[12b]">lv_menu_section_constructor</a> from lv_menu.o(.text.lv_menu_section_constructor) referenced from lv_menu.o(.rodata.lv_menu_section_class)
 <LI><a href="#[ce]">lv_menu_value_changed_event_cb</a> from lv_menu.o(.text.lv_menu_value_changed_event_cb) referenced 2 times from lv_menu.o(.text.lv_menu_constructor)
 <LI><a href="#[12c]">lv_meter_constructor</a> from lv_meter.o(.text.lv_meter_constructor) referenced from lv_meter.o(.rodata.lv_meter_class)
 <LI><a href="#[12d]">lv_meter_destructor</a> from lv_meter.o(.text.lv_meter_destructor) referenced from lv_meter.o(.rodata.lv_meter_class)
 <LI><a href="#[12e]">lv_meter_event</a> from lv_meter.o(.text.lv_meter_event) referenced from lv_meter.o(.rodata.lv_meter_class)
 <LI><a href="#[12f]">lv_obj_constructor</a> from lv_obj.o(.text.lv_obj_constructor) referenced from lv_obj.o(.rodata.lv_obj_class)
 <LI><a href="#[130]">lv_obj_destructor</a> from lv_obj.o(.text.lv_obj_destructor) referenced from lv_obj.o(.rodata.lv_obj_class)
 <LI><a href="#[131]">lv_obj_event</a> from lv_obj.o(.text.lv_obj_event) referenced from lv_obj.o(.rodata.lv_obj_class)
 <LI><a href="#[a7]">lv_obj_get_height</a> from lv_obj_pos.o(.text.lv_obj_get_height) referenced 2 times from lv_flex.o(.text.find_track_end)
 <LI><a href="#[a6]">lv_obj_get_width</a> from lv_obj_pos.o(.text.lv_obj_get_width) referenced 2 times from lv_flex.o(.text.find_track_end)
 <LI><a href="#[132]">lv_roller_constructor</a> from lv_roller.o(.text.lv_roller_constructor) referenced from lv_roller.o(.rodata.lv_roller_class)
 <LI><a href="#[133]">lv_roller_event</a> from lv_roller.o(.text.lv_roller_event) referenced from lv_roller.o(.rodata.lv_roller_class)
 <LI><a href="#[134]">lv_roller_label_event</a> from lv_roller.o(.text.lv_roller_label_event) referenced from lv_roller.o(.rodata.lv_roller_label_class)
 <LI><a href="#[135]">lv_slider_constructor</a> from lv_slider.o(.text.lv_slider_constructor) referenced from lv_slider.o(.rodata.lv_slider_class)
 <LI><a href="#[136]">lv_slider_event</a> from lv_slider.o(.text.lv_slider_event) referenced from lv_slider.o(.rodata.lv_slider_class)
 <LI><a href="#[137]">lv_spinbox_constructor</a> from lv_spinbox.o(.text.lv_spinbox_constructor) referenced from lv_spinbox.o(.rodata.lv_spinbox_class)
 <LI><a href="#[138]">lv_spinbox_event</a> from lv_spinbox.o(.text.lv_spinbox_event) referenced from lv_spinbox.o(.rodata.lv_spinbox_class)
 <LI><a href="#[139]">lv_spinner_constructor</a> from lv_spinner.o(.text.lv_spinner_constructor) referenced from lv_spinner.o(.rodata.lv_spinner_class)
 <LI><a href="#[e0]">lv_switch_anim_exec_cb</a> from lv_switch.o(.text.lv_switch_anim_exec_cb) referenced 2 times from lv_switch.o(.text.lv_switch_event)
 <LI><a href="#[e1]">lv_switch_anim_ready</a> from lv_switch.o(.text.lv_switch_anim_ready) referenced 2 times from lv_switch.o(.text.lv_switch_event)
 <LI><a href="#[13a]">lv_switch_constructor</a> from lv_switch.o(.text.lv_switch_constructor) referenced from lv_switch.o(.rodata.lv_switch_class)
 <LI><a href="#[13b]">lv_switch_destructor</a> from lv_switch.o(.text.lv_switch_destructor) referenced from lv_switch.o(.rodata.lv_switch_class)
 <LI><a href="#[13c]">lv_switch_event</a> from lv_switch.o(.text.lv_switch_event) referenced from lv_switch.o(.rodata.lv_switch_class)
 <LI><a href="#[13d]">lv_table_constructor</a> from lv_table.o(.text.lv_table_constructor) referenced from lv_table.o(.rodata.lv_table_class)
 <LI><a href="#[13e]">lv_table_destructor</a> from lv_table.o(.text.lv_table_destructor) referenced from lv_table.o(.rodata.lv_table_class)
 <LI><a href="#[13f]">lv_table_event</a> from lv_table.o(.text.lv_table_event) referenced from lv_table.o(.rodata.lv_table_class)
 <LI><a href="#[140]">lv_tabview_constructor</a> from lv_tabview.o(.text.lv_tabview_constructor) referenced from lv_tabview.o(.rodata.lv_tabview_class)
 <LI><a href="#[141]">lv_tabview_destructor</a> from lv_tabview.o(.text.lv_tabview_destructor) referenced from lv_tabview.o(.rodata.lv_tabview_class)
 <LI><a href="#[142]">lv_tabview_event</a> from lv_tabview.o(.text.lv_tabview_event) referenced from lv_tabview.o(.rodata.lv_tabview_class)
 <LI><a href="#[143]">lv_textarea_constructor</a> from lv_textarea.o(.text.lv_textarea_constructor) referenced from lv_textarea.o(.rodata.lv_textarea_class)
 <LI><a href="#[144]">lv_textarea_destructor</a> from lv_textarea.o(.text.lv_textarea_destructor) referenced from lv_textarea.o(.rodata.lv_textarea_class)
 <LI><a href="#[145]">lv_textarea_event</a> from lv_textarea.o(.text.lv_textarea_event) referenced from lv_textarea.o(.rodata.lv_textarea_class)
 <LI><a href="#[146]">lv_tileview_constructor</a> from lv_tileview.o(.text.lv_tileview_constructor) referenced from lv_tileview.o(.rodata.lv_tileview_class)
 <LI><a href="#[147]">lv_tileview_tile_constructor</a> from lv_tileview.o(.text.lv_tileview_tile_constructor) referenced from lv_tileview.o(.rodata.lv_tileview_tile_class)
 <LI><a href="#[6]">lv_txt_unicode_to_utf8</a> from lv_txt.o(.text.lv_txt_unicode_to_utf8) referenced 2 times from lv_txt.o(.data._lv_txt_unicode_to_encoded)
 <LI><a href="#[2]">lv_txt_utf8_get_byte_id</a> from lv_txt.o(.text.lv_txt_utf8_get_byte_id) referenced 2 times from lv_txt.o(.data._lv_txt_encoded_get_byte_id)
 <LI><a href="#[3]">lv_txt_utf8_get_char_id</a> from lv_txt.o(.text.lv_txt_utf8_get_char_id) referenced 2 times from lv_txt.o(.data._lv_txt_encoded_get_char_id)
 <LI><a href="#[5]">lv_txt_utf8_get_length</a> from lv_txt.o(.text.lv_txt_utf8_get_length) referenced 2 times from lv_txt.o(.data._lv_txt_get_encoded_length)
 <LI><a href="#[1]">lv_txt_utf8_next</a> from lv_txt.o(.text.lv_txt_utf8_next) referenced 2 times from lv_txt.o(.data..L_MergedGlobals)
 <LI><a href="#[4]">lv_txt_utf8_prev</a> from lv_txt.o(.text.lv_txt_utf8_prev) referenced 2 times from lv_txt.o(.data._lv_txt_encoded_prev)
 <LI><a href="#[0]">lv_txt_utf8_size</a> from lv_txt.o(.text.lv_txt_utf8_size) referenced 2 times from lv_txt.o(.data..L_MergedGlobals)
 <LI><a href="#[148]">lv_win_constructor</a> from lv_win.o(.text.lv_win_constructor) referenced from lv_win.o(.rodata.lv_win_class)
 <LI><a href="#[e9]">month_event_cb</a> from lv_calendar_header_arrow.o(.text.month_event_cb) referenced 4 times from lv_calendar_header_arrow.o(.text.my_constructor)
 <LI><a href="#[8f]">mouse_counter</a> from work_detector.o(.text.mouse_counter) referenced 2 times from work_detector.o(.text.detector_init)
 <LI><a href="#[cf]">msgbox_close_click_event_cb</a> from lv_msgbox.o(.text.msgbox_close_click_event_cb) referenced 2 times from lv_msgbox.o(.text.lv_msgbox_create)
 <LI><a href="#[106]">my_constructor</a> from lv_calendar_header_arrow.o(.text.my_constructor) referenced from lv_calendar_header_arrow.o(.rodata.lv_calendar_header_arrow_class)
 <LI><a href="#[107]">my_constructor</a> from lv_calendar_header_dropdown.o(.text.my_constructor) referenced from lv_calendar_header_dropdown.o(.rodata.lv_calendar_header_dropdown_class)
 <LI><a href="#[a]">nl_func_sigmoid_array_f32</a> from layers_nl_generic_float.o(i.nl_func_sigmoid_array_f32) referenced 2 times from room_temp_rnn.o(.data.lstm_0_layer)
 <LI><a href="#[9]">nl_func_tanh_array_f32</a> from layers_nl_generic_float.o(i.nl_func_tanh_array_f32) referenced 4 times from room_temp_rnn.o(.data.lstm_0_layer)
 <LI><a href="#[db]">opa_scale_anim</a> from lv_disp.o(.text.opa_scale_anim) referenced 4 times from lv_disp.o(.text.lv_scr_load_anim)
 <LI><a href="#[e4]">pwd_char_hider_anim</a> from lv_textarea.o(.text.pwd_char_hider_anim) referenced 2 times from lv_textarea.o(.text.lv_textarea_add_char)
 <LI><a href="#[e4]">pwd_char_hider_anim</a> from lv_textarea.o(.text.pwd_char_hider_anim) referenced 2 times from lv_textarea.o(.text.lv_textarea_add_text)
 <LI><a href="#[e4]">pwd_char_hider_anim</a> from lv_textarea.o(.text.pwd_char_hider_anim) referenced 2 times from lv_textarea.o(.text.lv_textarea_set_text)
 <LI><a href="#[e5]">pwd_char_hider_anim_ready</a> from lv_textarea.o(.text.pwd_char_hider_anim_ready) referenced 2 times from lv_textarea.o(.text.lv_textarea_add_char)
 <LI><a href="#[e5]">pwd_char_hider_anim_ready</a> from lv_textarea.o(.text.pwd_char_hider_anim_ready) referenced 2 times from lv_textarea.o(.text.lv_textarea_add_text)
 <LI><a href="#[e5]">pwd_char_hider_anim_ready</a> from lv_textarea.o(.text.pwd_char_hider_anim_ready) referenced 2 times from lv_textarea.o(.text.lv_textarea_set_text)
 <LI><a href="#[d7]">scr_anim_ready</a> from lv_disp.o(.text.scr_anim_ready) referenced 2 times from lv_disp.o(.text.lv_scr_load_anim)
 <LI><a href="#[d8]">scr_load_anim_start</a> from lv_disp.o(.text.scr_load_anim_start) referenced 2 times from lv_disp.o(.text.lv_scr_load_anim)
 <LI><a href="#[96]">screen_guard_btn_1_event_handler</a> from events_init.o(.text.screen_guard_btn_1_event_handler) referenced 2 times from events_init.o(.text.events_init_screen_guard)
 <LI><a href="#[9c]">screen_main_btn_auto_light_event_handler</a> from events_init.o(.text.screen_main_btn_auto_light_event_handler) referenced 2 times from events_init.o(.text.events_init_screen_main)
 <LI><a href="#[9d]">screen_main_btn_chat_event_handler</a> from events_init.o(.text.screen_main_btn_chat_event_handler) referenced 2 times from events_init.o(.text.events_init_screen_main)
 <LI><a href="#[99]">screen_main_btn_desk_mode_event_handler</a> from events_init.o(.text.screen_main_btn_desk_mode_event_handler) referenced 2 times from events_init.o(.text.events_init_screen_main)
 <LI><a href="#[98]">screen_main_btn_guard_mode_event_handler</a> from events_init.o(.text.screen_main_btn_guard_mode_event_handler) referenced 2 times from events_init.o(.text.events_init_screen_main)
 <LI><a href="#[9b]">screen_main_btn_handset_light_event_handler</a> from events_init.o(.text.screen_main_btn_handset_light_event_handler) referenced 2 times from events_init.o(.text.events_init_screen_main)
 <LI><a href="#[f3]">screen_main_digital_clock_timer</a> from widgets_init.o(.text.screen_main_digital_clock_timer) referenced 2 times from setup_scr_screen_main.o(.text.setup_scr_screen_main)
 <LI><a href="#[97]">screen_main_event_handler</a> from events_init.o(.text.screen_main_event_handler) referenced 2 times from events_init.o(.text.events_init_screen_main)
 <LI><a href="#[9a]">screen_main_slider_led_Light_event_handler</a> from events_init.o(.text.screen_main_slider_led_Light_event_handler) referenced 2 times from events_init.o(.text.events_init_screen_main)
 <LI><a href="#[a2]">screen_work_btn_auto_light_event_handler</a> from events_init.o(.text.screen_work_btn_auto_light_event_handler) referenced 2 times from events_init.o(.text.events_init_screen_work)
 <LI><a href="#[a1]">screen_work_btn_handset_light_event_handler</a> from events_init.o(.text.screen_work_btn_handset_light_event_handler) referenced 2 times from events_init.o(.text.events_init_screen_work)
 <LI><a href="#[9f]">screen_work_button_stop_work_event_handler</a> from events_init.o(.text.screen_work_button_stop_work_event_handler) referenced 2 times from events_init.o(.text.events_init_screen_work)
 <LI><a href="#[f4]">screen_work_digital_clock_timer</a> from widgets_init.o(.text.screen_work_digital_clock_timer) referenced 2 times from setup_scr_screen_work.o(.text.setup_scr_screen_work)
 <LI><a href="#[9e]">screen_work_event_handler</a> from events_init.o(.text.screen_work_event_handler) referenced 2 times from events_init.o(.text.events_init_screen_work)
 <LI><a href="#[a3]">screen_work_msgbox_1_event_handler</a> from events_init.o(.text.screen_work_msgbox_1_event_handler) referenced 2 times from events_init.o(.text.events_init_screen_work)
 <LI><a href="#[a4]">screen_work_setting_btn_work_begin_event_handler</a> from events_init.o(.text.screen_work_setting_btn_work_begin_event_handler) referenced 2 times from events_init.o(.text.events_init_screen_work_setting)
 <LI><a href="#[a5]">screen_work_setting_btn_work_cancel_event_handler</a> from events_init.o(.text.screen_work_setting_btn_work_cancel_event_handler) referenced 2 times from events_init.o(.text.events_init_screen_work_setting)
 <LI><a href="#[f5]">screen_work_setting_digital_clock_timer</a> from widgets_init.o(.text.screen_work_setting_digital_clock_timer) referenced 2 times from setup_scr_screen_work_setting.o(.text.setup_scr_screen_work_setting)
 <LI><a href="#[a0]">screen_work_slider_led_light_event_handler</a> from events_init.o(.text.screen_work_slider_led_light_event_handler) referenced 2 times from events_init.o(.text.events_init_screen_work)
 <LI><a href="#[d2]">scroll_anim_ready_cb</a> from lv_obj_scroll.o(.text.scroll_anim_ready_cb) referenced 2 times from lv_obj_scroll.o(.text.lv_obj_scroll_by)
 <LI><a href="#[ee]">scroll_anim_ready_cb</a> from lv_roller.o(.text.scroll_anim_ready_cb) referenced 2 times from lv_roller.o(.text.refr_position)
 <LI><a href="#[d0]">scroll_x_anim</a> from lv_obj_scroll.o(.text.scroll_x_anim) referenced 2 times from lv_obj_scroll.o(.text.lv_obj_get_scroll_end)
 <LI><a href="#[d0]">scroll_x_anim</a> from lv_obj_scroll.o(.text.scroll_x_anim) referenced 4 times from lv_obj_scroll.o(.text.lv_obj_scroll_by)
 <LI><a href="#[d0]">scroll_x_anim</a> from lv_obj_scroll.o(.text.scroll_x_anim) referenced 2 times from lv_obj_scroll.o(.text.lv_obj_scroll_to)
 <LI><a href="#[d0]">scroll_x_anim</a> from lv_obj_scroll.o(.text.scroll_x_anim) referenced 2 times from lv_obj_scroll.o(.text.lv_obj_scroll_to_x)
 <LI><a href="#[d0]">scroll_x_anim</a> from lv_obj_scroll.o(.text.scroll_x_anim) referenced 2 times from lv_obj_scroll.o(.text.scroll_area_into_view)
 <LI><a href="#[d1]">scroll_y_anim</a> from lv_obj_scroll.o(.text.scroll_y_anim) referenced 2 times from lv_obj_scroll.o(.text.lv_obj_get_scroll_end)
 <LI><a href="#[d1]">scroll_y_anim</a> from lv_obj_scroll.o(.text.scroll_y_anim) referenced 4 times from lv_obj_scroll.o(.text.lv_obj_scroll_by)
 <LI><a href="#[d1]">scroll_y_anim</a> from lv_obj_scroll.o(.text.scroll_y_anim) referenced 2 times from lv_obj_scroll.o(.text.lv_obj_scroll_to)
 <LI><a href="#[d1]">scroll_y_anim</a> from lv_obj_scroll.o(.text.scroll_y_anim) referenced 2 times from lv_obj_scroll.o(.text.lv_obj_scroll_to_y)
 <LI><a href="#[d1]">scroll_y_anim</a> from lv_obj_scroll.o(.text.scroll_y_anim) referenced 2 times from lv_obj_scroll.o(.text.scroll_area_into_view)
 <LI><a href="#[cb]">set_ofs_x_anim</a> from lv_label.o(.text.set_ofs_x_anim) referenced 8 times from lv_label.o(.text.lv_label_refr_text)
 <LI><a href="#[cb]">set_ofs_x_anim</a> from lv_label.o(.text.set_ofs_x_anim) referenced 2 times from lv_label.o(.text.lv_label_set_long_mode)
 <LI><a href="#[cc]">set_ofs_y_anim</a> from lv_label.o(.text.set_ofs_y_anim) referenced 6 times from lv_label.o(.text.lv_label_refr_text)
 <LI><a href="#[cc]">set_ofs_y_anim</a> from lv_label.o(.text.set_ofs_y_anim) referenced 2 times from lv_label.o(.text.lv_label_set_long_mode)
 <LI><a href="#[d9]">set_x_anim</a> from lv_disp.o(.text.set_x_anim) referenced 14 times from lv_disp.o(.text.lv_scr_load_anim)
 <LI><a href="#[d6]">set_y_anim</a> from lv_roller.o(.text.set_y_anim) referenced 2 times from lv_roller.o(.text.lv_roller_event)
 <LI><a href="#[da]">set_y_anim</a> from lv_disp.o(.text.set_y_anim) referenced 12 times from lv_disp.o(.text.lv_scr_load_anim)
 <LI><a href="#[d6]">set_y_anim</a> from lv_roller.o(.text.set_y_anim) referenced 4 times from lv_roller.o(.text.refr_position)
 <LI><a href="#[f1]">setup_scr_screen_guard</a> from setup_scr_screen_guard.o(.text.setup_scr_screen_guard) referenced 2 times from events_init.o(.text.screen_main_btn_guard_mode_event_handler)
 <LI><a href="#[ef]">setup_scr_screen_main</a> from setup_scr_screen_main.o(.text.setup_scr_screen_main) referenced 2 times from events_init.o(.text.screen_guard_btn_1_event_handler)
 <LI><a href="#[ef]">setup_scr_screen_main</a> from setup_scr_screen_main.o(.text.setup_scr_screen_main) referenced 2 times from events_init.o(.text.screen_work_msgbox_1_event_handler)
 <LI><a href="#[ef]">setup_scr_screen_main</a> from setup_scr_screen_main.o(.text.setup_scr_screen_main) referenced 2 times from events_init.o(.text.screen_work_setting_btn_work_cancel_event_handler)
 <LI><a href="#[f2]">setup_scr_screen_work</a> from setup_scr_screen_work.o(.text.setup_scr_screen_work) referenced 2 times from events_init.o(.text.screen_work_setting_btn_work_begin_event_handler)
 <LI><a href="#[f0]">setup_scr_screen_work_setting</a> from setup_scr_screen_work_setting.o(.text.setup_scr_screen_work_setting) referenced 2 times from events_init.o(.text.screen_main_btn_desk_mode_event_handler)
 <LI><a href="#[8c]">stop_analyser</a> from work_detector.o(.text.stop_analyser) referenced 2 times from work_detector.o(.text.detector_init)
 <LI><a href="#[e7]">theme_apply</a> from lv_theme_default.o(.text.theme_apply) referenced 2 times from lv_theme_default.o(.text.lv_theme_default_init)
 <LI><a href="#[e8]">tileview_event_cb</a> from lv_tileview.o(.text.tileview_event_cb) referenced 2 times from lv_tileview.o(.text.lv_tileview_constructor)
 <LI><a href="#[d5]">touchpad_read</a> from lv_port_indev.o(.text.touchpad_read) referenced 2 times from lv_port_indev.o(.text.lv_port_indev_init)
 <LI><a href="#[10]">tp_adjust</a> from touch.o(.text.tp_adjust) referenced 2 times from touch.o(.data.tp_dev)
 <LI><a href="#[e]">tp_init</a> from touch.o(.text.tp_init) referenced 2 times from touch.o(.data.tp_dev)
 <LI><a href="#[f]">tp_scan</a> from touch.o(.text.tp_scan) referenced 2 times from touch.o(.data.tp_dev)
 <LI><a href="#[80]">trans_anim_cb</a> from lv_obj_style.o(.text.trans_anim_cb) referenced 2 times from lv_obj_style.o(.text._lv_obj_style_create_transition)
 <LI><a href="#[7e]">trans_anim_ready_cb</a> from lv_obj_style.o(.text.trans_anim_ready_cb) referenced 2 times from lv_obj_style.o(.text._lv_obj_style_create_transition)
 <LI><a href="#[7f]">trans_anim_start_cb</a> from lv_obj_style.o(.text.trans_anim_start_cb) referenced 2 times from lv_obj_style.o(.text._lv_obj_style_create_transition)
 <LI><a href="#[a8]">unicode_list_compare</a> from lv_font_fmt_txt.o(.text.unicode_list_compare) referenced 4 times from lv_font_fmt_txt.o(.text.get_glyph_dsc_id)
 <LI><a href="#[ea]">value_changed_event_cb</a> from lv_calendar_header_arrow.o(.text.value_changed_event_cb) referenced 4 times from lv_calendar_header_arrow.o(.text.my_constructor)
 <LI><a href="#[8e]">water_counter</a> from work_detector.o(.text.water_counter) referenced 2 times from work_detector.o(.text.detector_init)
 <LI><a href="#[8d]">work_count_analyser</a> from work_detector.o(.text.work_count_analyser) referenced 2 times from work_detector.o(.text.detector_init)
 <LI><a href="#[89]">work_counter</a> from work_detector.o(.text.work_counter) referenced 2 times from work_detector.o(.text.detector_init)
 <LI><a href="#[94]">work_to_lvgl_bar</a> from work_detector.o(.text.work_to_lvgl_bar) referenced 2 times from work_detector.o(.text.detector_init)
 <LI><a href="#[eb]">year_event_cb</a> from lv_calendar_header_dropdown.o(.text.year_event_cb) referenced 2 times from lv_calendar_header_dropdown.o(.text.my_constructor)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[149]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[14b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[4fd]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4fe]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4ff]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[500]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[501]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[14c]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[177]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[14e]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[150]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[151]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[153]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[502]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[160]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[155]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[157]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[503]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[504]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[159]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[505]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[506]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[507]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[508]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[509]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[50a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[50b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[50c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[50d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[50e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[50f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[510]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[511]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[512]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[513]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[514]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[515]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[516]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[165]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[517]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[518]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[519]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[51a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[51b]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[51c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[51d]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[14a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[51e]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[15d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[15f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[51f]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[161]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; setup_ui &rArr; lv_disp_load_scr &rArr; lv_scr_load_anim &rArr; lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[520]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[196]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[164]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[521]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[166]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[11]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[195]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[522]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lstm
</UL>

<P><STRONG><a name="[16b]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lstm
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[1ca]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[523]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_set
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Run_fcn
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init_fcn
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Run_rnn
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init_rnn
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_adjust
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_setting_btn_work_begin_event_handler
</UL>

<P><STRONG><a name="[16e]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_message
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_adjust
</UL>

<P><STRONG><a name="[170]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[172]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[173]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[171]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[14f]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[152]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[524]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[178]"></a>putchar</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, putchar.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[179]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = puts
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detector_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init_fcn
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init_rnn
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_GetMeasurement
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_init
</UL>

<P><STRONG><a name="[4cd]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_check_custom_types
</UL>

<P><STRONG><a name="[380]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
</UL>

<P><STRONG><a name="[275]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_cut
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>

<P><STRONG><a name="[4ba]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_ai_buffer_array_copy
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
</UL>

<P><STRONG><a name="[525]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[526]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[527]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
</UL>

<P><STRONG><a name="[17c]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
</UL>

<P><STRONG><a name="[528]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>

<P><STRONG><a name="[17e]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[17b]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[21f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_WHITE_Change
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
</UL>

<P><STRONG><a name="[529]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[52a]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[335]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_btn_text
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[52b]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[52c]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[52d]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[52e]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[52f]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[530]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[531]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[532]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[533]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[180]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[158]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[182]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[534]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[185]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[174]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[18c]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[16f]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[6e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[18f]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[154]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[190]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[16d]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[535]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[536]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[537]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[538]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[539]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[18e]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[187]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[191]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[181]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[15e]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[163]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[193]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[192]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[197]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[199]"></a>AHT10_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, aht10.o(.text.AHT10_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AHT10_Init &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19b]"></a>AHT10_Read_predata</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, aht10.o(.text.AHT10_Read_predata))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AHT10_Read_predata &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1a1]"></a>AHT10_TrigeMea</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, aht10.o(.text.AHT10_TrigeMea))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AHT10_TrigeMea &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1a2]"></a>AI_Init_fcn</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, fcn.o(.text.AI_Init_fcn))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = AI_Init_fcn &rArr; ai_room_state_fcn_create_and_init &rArr; ai_room_state_fcn_init &rArr; ai_platform_network_init &rArr; _platform_ai_buffer_array_copy &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_outputs_get
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_inputs_get
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_create_and_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>AI_Init_rnn</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, rnn.o(.text.AI_Init_rnn))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = AI_Init_rnn &rArr; ai_room_temp_rnn_create_and_init &rArr; ai_room_temp_rnn_init &rArr; ai_platform_network_init &rArr; _platform_ai_buffer_array_copy &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_outputs_get
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_inputs_get
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_create_and_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ab]"></a>AI_Run_fcn</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fcn.o(.text.AI_Run_fcn))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = AI_Run_fcn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_run
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_get_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1ae]"></a>AI_Run_rnn</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, rnn.o(.text.AI_Run_rnn))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = AI_Run_rnn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_run
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_get_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1b1]"></a>BH1750_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bh1750.o(.text.BH1750_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BH1750_Init &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b2]"></a>BH1750_ReadLightIntensity</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bh1750.o(.text.BH1750_ReadLightIntensity))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BH1750_ReadLightIntensity &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1b5]"></a>BH1750_TriggerMeasurement</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bh1750.o(.text.BH1750_TriggerMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BH1750_TriggerMeasurement &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[15]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DMA1_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DMA1_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a4]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Run_fcn
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init_fcn
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Run_rnn
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init_rnn
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM11_Init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[1d7]"></a>FSMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_ll_fsmc.o(.text.FSMC_NORSRAM_Extended_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[1d5]"></a>FSMC_NORSRAM_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_ll_fsmc.o(.text.FSMC_NORSRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NORSRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[1d6]"></a>FSMC_NORSRAM_Timing_Init</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f4xx_ll_fsmc.o(.text.FSMC_NORSRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FSMC_NORSRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_DMA_Abort</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_DMA
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_DMA_Init</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_DMA
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[19d]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT10_Read_predata
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_adjust
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ex_st7789_reginit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_GPIO_Init</STRONG> (Thumb, 456 bytes, Stack size 44 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[49a]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_scan
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_read_xoy
</UL>

<P><STRONG><a name="[20e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_read_xoy
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_I2C_Init</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>

<P><STRONG><a name="[19c]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 1618 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_Master_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_GetMeasurement
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadLightIntensity
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT10_Read_predata
</UL>

<P><STRONG><a name="[19a]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 904 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_send_measure
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_TriggerMeasurement
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT10_TrigeMea
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT10_Read_predata
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT10_Init
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, i2c.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[221]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_InitTick</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_MspInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1d0]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1c7]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[226]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1c9]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1cb]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 832 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[211]"></a>HAL_RTCEx_SetWakeUpTimer_IT</STRONG> (Thumb, 328 bytes, Stack size 12 bytes, stm32f4xx_hal_rtc_ex.o(.text.HAL_RTCEx_SetWakeUpTimer_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTCEx_SetWakeUpTimer_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[1cd]"></a>HAL_RTCEx_WakeUpTimerEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(.text.HAL_RTCEx_WakeUpTimerEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerIRQHandler
</UL>

<P><STRONG><a name="[1cc]"></a>HAL_RTCEx_WakeUpTimerIRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc_ex.o(.text.HAL_RTCEx_WakeUpTimerIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_WakeUpTimerIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[481]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(.text.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20a]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(.text.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_RTC_Init</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(.text.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[1cf]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rtc.o(.text.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1d1]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, stm32f4xx_hal_rtc.o(.text.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_SetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, stm32f4xx_hal_rtc.o(.text.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[1d3]"></a>HAL_SRAM_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_sram.o(.text.HAL_SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_SRAM_Init &rArr; HAL_SRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Timing_Init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_SRAM_MspInit</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, fsmc.o(.text.HAL_SRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[217]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM11_Init
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 442 bytes, Stack size 24 bytes, tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[204]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[1ec]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[215]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 410 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_ConfigClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[224]"></a>HAL_TIM_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAError
</UL>

<P><STRONG><a name="[1de]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1db]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, tim.o(.text.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM11_Init
</UL>

<P><STRONG><a name="[1df]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[213]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 548 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM11_Init
</UL>

<P><STRONG><a name="[1e4]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM11_Init
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, tim.o(.text.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_PulseFinishedCallback &rArr; HAL_TIM_PWM_Stop_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMADelayPulseCplt
</UL>

<P><STRONG><a name="[223]"></a>HAL_TIM_PWM_PulseFinishedHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMADelayPulseHalfCplt
</UL>

<P><STRONG><a name="[47d]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 316 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e7]"></a>HAL_TIM_PWM_Start_DMA</STRONG> (Thumb, 682 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_PWM_Start_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_WHITE_Change
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_TIM_PWM_Stop_DMA</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Stop_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Stop_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 1552 bytes, Stack size 80 bytes, main.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcn_to_main
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Run_fcn
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_to_main
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Run_rnn
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_send_measure
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_GetMeasurement
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_TriggerMeasurement
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadLightIntensity
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT10_TrigeMea
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT10_Read_predata
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_y
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_x
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_WHITE_Change
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_message
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[1fd]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1418 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[1fe]"></a>HAL_UART_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_UART_MspInit</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[201]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[202]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2460 bytes, Stack size 136 bytes, main.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_work_max
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_game_max
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_y
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_x
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_loss_from_usart
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[225]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[209]"></a>HAL_UART_Transmit</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_message
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_setting_btn_work_begin_event_handler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_msgbox_1_event_handler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_btn_guard_mode_event_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_btn_chat_event_handler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_guard_btn_1_event_handler
</UL>

<P><STRONG><a name="[1fb]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[13]"></a>HardFault_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; hard_fault_handler_c &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20c]"></a>MX_DMA_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dma.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20d]"></a>MX_GPIO_Init</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20f]"></a>MX_I2C2_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, i2c.o(.text.MX_I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MX_I2C2_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[210]"></a>MX_RTC_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, rtc.o(.text.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[212]"></a>MX_TIM11_Init</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, tim.o(.text.MX_TIM11_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MX_TIM11_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[214]"></a>MX_TIM12_Init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tim.o(.text.MX_TIM12_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_TIM12_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[216]"></a>MX_TIM2_Init</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, tim.o(.text.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[218]"></a>MX_TIM3_Init</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, tim.o(.text.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[219]"></a>MX_TIM4_Init</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, tim.o(.text.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21a]"></a>MX_TIM5_Init</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, tim.o(.text.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21b]"></a>MX_TIM9_Init</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, tim.o(.text.MX_TIM9_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MX_TIM9_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21c]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21d]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usart.o(.text.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21e]"></a>RGB_SetColor</STRONG> (Thumb, 384 bytes, Stack size 28 bytes, ws2812.o(.text.RGB_SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RGB_SetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_WHITE_Change
</UL>

<P><STRONG><a name="[1ee]"></a>RGB_WHITE_Change</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ws2812.o(.text.RGB_WHITE_Change))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RGB_WHITE_Change &rArr; HAL_TIM_PWM_Start_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_SetColor
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_DMA
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.RTC_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WKUP_IRQHandler &rArr; HAL_RTCEx_WakeUpTimerIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f7]"></a>SGP30_GetMeasurement</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, sgp30.o(.text.SGP30_GetMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SGP30_GetMeasurement &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[220]"></a>SGP30_Init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sgp30.o(.text.SGP30_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SGP30_Init &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f8]"></a>SGP30_send_measure</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sgp30.o(.text.SGP30_send_measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SGP30_send_measure &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[222]"></a>SystemClock_Config</STRONG> (Thumb, 170 bytes, Stack size 88 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>TIM2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM4_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.TIM8_BRK_TIM12_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = TIM8_BRK_TIM12_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1da]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 334 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[73]"></a>TIM_DMADelayPulseHalfCplt</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.TIM_DMADelayPulseHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DMADelayPulseHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start_DMA)
</UL>
<P><STRONG><a name="[74]"></a>TIM_DMAError</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.TIM_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start_DMA)
</UL>
<P><STRONG><a name="[41]"></a>USART2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[227]"></a>_lv_anim_core_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lv_anim.o(.text._lv_anim_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _lv_anim_core_init &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_pause
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[239]"></a>_lv_area_diff</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, lv_area.o(.text._lv_area_diff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_area_diff
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[265]"></a>_lv_area_intersect</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lv_area.o(.text._lv_area_intersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[22d]"></a>_lv_area_is_in</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, lv_area.o(.text._lv_area_is_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
</UL>

<P><STRONG><a name="[233]"></a>_lv_area_is_on</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lv_area.o(.text._lv_area_is_on))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[22f]"></a>_lv_area_is_out</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, lv_area.o(.text._lv_area_is_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _lv_area_is_out &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
</UL>

<P><STRONG><a name="[22e]"></a>_lv_area_is_point_on</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, lv_area.o(.text._lv_area_is_point_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[234]"></a>_lv_area_join</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, lv_area.o(.text._lv_area_join))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[b2]"></a>_lv_disp_refr_timer</STRONG> (Thumb, 1586 bytes, Stack size 104 bytes, lv_refr.o(.text._lv_disp_refr_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = _lv_disp_refr_timer &rArr; refr_area_part &rArr; lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_pause
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_free_all
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_font_clean_up_fmt_txt
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_mask_cleanup
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_join
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_on
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_diff
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_disp.o(.text.lv_disp_drv_register)
</UL>
<P><STRONG><a name="[246]"></a>_lv_draw_mask_cleanup</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lv_draw_mask.o(.text._lv_draw_mask_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _lv_draw_mask_cleanup &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[3e4]"></a>_lv_event_mark_deleted</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lv_event.o(.text._lv_event_mark_deleted))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[245]"></a>_lv_font_clean_up_fmt_txt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text._lv_font_clean_up_fmt_txt))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[247]"></a>_lv_fs_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_fs.o(.text._lv_fs_init))
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[248]"></a>_lv_group_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_group.o(.text._lv_group_init))
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[249]"></a>_lv_img_buf_get_transformed_area</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, lv_img_buf.o(.text._lv_img_buf_get_transformed_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lv_img_buf_get_transformed_area &rArr; lv_point_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
</UL>

<P><STRONG><a name="[24b]"></a>_lv_img_cache_open</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lv_img_cache.o(.text._lv_img_cache_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _lv_img_cache_open &rArr; lv_img_decoder_open &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[24d]"></a>_lv_img_decoder_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lv_img_decoder.o(.text._lv_img_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _lv_img_decoder_init &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[24f]"></a>_lv_indev_read</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_hal_indev.o(.text._lv_indev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _lv_indev_read &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[250]"></a>_lv_indev_scroll_handler</STRONG> (Thumb, 1586 bytes, Stack size 88 bytes, lv_indev_scroll.o(.text._lv_indev_scroll_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _lv_indev_scroll_handler &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_transform
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_dir
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[261]"></a>_lv_indev_scroll_throw_handler</STRONG> (Thumb, 808 bytes, Stack size 40 bytes, lv_indev_scroll.o(.text._lv_indev_scroll_throw_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _lv_indev_scroll_throw_handler &rArr; lv_obj_scroll_by &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[263]"></a>_lv_inv_area</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, lv_refr.o(.text._lv_inv_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_invalidation_enabled
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[23d]"></a>_lv_ll_clear</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lv_ll.o(.text._lv_ll_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _lv_ll_clear &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_destructor
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_destructor
</UL>

<P><STRONG><a name="[22a]"></a>_lv_ll_get_head</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_head))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[344]"></a>_lv_ll_get_len</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_len))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_obj_count
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[238]"></a>_lv_ll_get_next</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_next))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[343]"></a>_lv_ll_get_prev</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_prev))
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
</UL>

<P><STRONG><a name="[342]"></a>_lv_ll_get_tail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_tail))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
</UL>

<P><STRONG><a name="[228]"></a>_lv_ll_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_init))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_timer_core_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_constructor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_constructor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[24e]"></a>_lv_ll_ins_head</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_ll.o(.text._lv_ll_ins_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[23a]"></a>_lv_ll_ins_prev</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lv_ll.o(.text._lv_ll_ins_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _lv_ll_ins_prev &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[241]"></a>_lv_ll_ins_tail</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_ll.o(.text._lv_ll_ins_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _lv_ll_ins_tail &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[236]"></a>_lv_ll_is_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[23b]"></a>_lv_ll_remove</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lv_ll.o(.text._lv_ll_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[484]"></a>_lv_obj_destruct</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_obj_class.o(.text._lv_obj_destruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_obj_destruct
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[3d9]"></a>_lv_obj_get_ext_draw_size</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_draw.o(.text._lv_obj_get_ext_draw_size))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[42c]"></a>_lv_obj_get_layer_type</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_draw.o(.text._lv_obj_get_layer_type))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
</UL>

<P><STRONG><a name="[25b]"></a>_lv_obj_scroll_by_raw</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text._lv_obj_scroll_by_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
</UL>

<P><STRONG><a name="[26a]"></a>_lv_obj_style_apply_color_filter</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lv_obj_style.o(.text._lv_obj_style_apply_color_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[26b]"></a>_lv_obj_style_create_transition</STRONG> (Thumb, 334 bytes, Stack size 104 bytes, lv_obj_style.o(.text._lv_obj_style_create_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[270]"></a>_lv_obj_style_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_style.o(.text._lv_obj_style_init))
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[271]"></a>_lv_obj_style_state_compare</STRONG> (Thumb, 592 bytes, Stack size 40 bytes, lv_obj_style.o(.text._lv_obj_style_state_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _lv_obj_style_state_compare &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[363]"></a>_lv_refr_get_disp_refreshing</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_refr.o(.text._lv_refr_get_disp_refreshing))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_destroy
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_create
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_blend
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_adjust
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
</UL>

<P><STRONG><a name="[3a7]"></a>_lv_refr_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_refr.o(.text._lv_refr_init))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[3ef]"></a>_lv_style_get_prop_group</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_style.o(.text._lv_style_get_prop_group))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>

<P><STRONG><a name="[3ee]"></a>_lv_style_prop_lookup_flags</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, lv_style.o(.text._lv_style_prop_lookup_flags))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>

<P><STRONG><a name="[273]"></a>_lv_timer_core_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_timer.o(.text._lv_timer_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_timer_core_init
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[274]"></a>_lv_txt_cut</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lv_txt.o(.text._lv_txt_cut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_txt_cut &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
</UL>

<P><STRONG><a name="[361]"></a>_lv_txt_encoded_letter_next_2</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lv_txt.o(.text._lv_txt_encoded_letter_next_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_txt_encoded_letter_next_2
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[276]"></a>_lv_txt_get_next_line</STRONG> (Thumb, 1048 bytes, Stack size 88 bytes, lv_txt.o(.text._lv_txt_get_next_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[278]"></a>_lv_txt_ins</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, lv_txt.o(.text._lv_txt_ins))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _lv_txt_ins &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
</UL>

<P><STRONG><a name="[3b6]"></a>_lv_txt_is_cmd</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, lv_txt.o(.text._lv_txt_is_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[279]"></a>_lv_txt_set_text_vfmt</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, lv_txt.o(.text._lv_txt_set_text_vfmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr;  _vsnprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_set_text_fmt
</UL>

<P><STRONG><a name="[2e6]"></a>_lv_utils_bsearch</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, lv_utils.o(.text._lv_utils_bsearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>

<P><STRONG><a name="[167]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(.text._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[198]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(.text._ttywrch))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[27d]"></a>ai_room_state_fcn_create</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, room_state_fcn.o(.text.ai_room_state_fcn_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ai_room_state_fcn_create &rArr; ai_platform_network_create &rArr; ai_check_custom_types &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_create_and_init
</UL>

<P><STRONG><a name="[1a3]"></a>ai_room_state_fcn_create_and_init</STRONG> (Thumb, 148 bytes, Stack size 88 bytes, room_state_fcn.o(.text.ai_room_state_fcn_create_and_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ai_room_state_fcn_create_and_init &rArr; ai_room_state_fcn_init &rArr; ai_platform_network_init &rArr; _platform_ai_buffer_array_copy &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_get_error
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_item_set_address
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_data_params_get
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init_fcn
</UL>

<P><STRONG><a name="[27f]"></a>ai_room_state_fcn_data_params_get</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, room_state_fcn_data.o(.text.ai_room_state_fcn_data_params_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ai_room_state_fcn_data_params_get &rArr; ai_platform_bind_network_params
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_bind_network_params
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_create_and_init
</UL>

<P><STRONG><a name="[1ad]"></a>ai_room_state_fcn_get_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, room_state_fcn.o(.text.ai_room_state_fcn_get_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_room_state_fcn_get_error &rArr; ai_platform_network_get_error
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_create_and_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Run_fcn
</UL>

<P><STRONG><a name="[281]"></a>ai_room_state_fcn_init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, room_state_fcn.o(.text.ai_room_state_fcn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ai_room_state_fcn_init &rArr; ai_platform_network_init &rArr; _platform_ai_buffer_array_copy &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;room_state_fcn_configure_weights
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;room_state_fcn_configure_activations
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_create_and_init
</UL>

<P><STRONG><a name="[1a5]"></a>ai_room_state_fcn_inputs_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, room_state_fcn.o(.text.ai_room_state_fcn_inputs_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ai_room_state_fcn_inputs_get &rArr; ai_platform_inputs_get &rArr; _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_inputs_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init_fcn
</UL>

<P><STRONG><a name="[1a6]"></a>ai_room_state_fcn_outputs_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, room_state_fcn.o(.text.ai_room_state_fcn_outputs_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ai_room_state_fcn_outputs_get &rArr; ai_platform_outputs_get &rArr; _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_outputs_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init_fcn
</UL>

<P><STRONG><a name="[1ac]"></a>ai_room_state_fcn_run</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, room_state_fcn.o(.text.ai_room_state_fcn_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ai_room_state_fcn_run &rArr; ai_platform_network_process &rArr; _platform_network_io_bind &rArr; _platform_network_state_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Run_fcn
</UL>

<P><STRONG><a name="[28b]"></a>ai_room_temp_rnn_create</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, room_temp_rnn.o(.text.ai_room_temp_rnn_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ai_room_temp_rnn_create &rArr; ai_platform_network_create &rArr; ai_check_custom_types &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_create_and_init
</UL>

<P><STRONG><a name="[1a8]"></a>ai_room_temp_rnn_create_and_init</STRONG> (Thumb, 148 bytes, Stack size 88 bytes, room_temp_rnn.o(.text.ai_room_temp_rnn_create_and_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ai_room_temp_rnn_create_and_init &rArr; ai_room_temp_rnn_init &rArr; ai_platform_network_init &rArr; _platform_ai_buffer_array_copy &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_get_error
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_data_params_get
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_create
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_item_set_address
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init_rnn
</UL>

<P><STRONG><a name="[28c]"></a>ai_room_temp_rnn_data_params_get</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, room_temp_rnn_data.o(.text.ai_room_temp_rnn_data_params_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ai_room_temp_rnn_data_params_get &rArr; ai_platform_bind_network_params
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_bind_network_params
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_create_and_init
</UL>

<P><STRONG><a name="[1b0]"></a>ai_room_temp_rnn_get_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, room_temp_rnn.o(.text.ai_room_temp_rnn_get_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_room_temp_rnn_get_error &rArr; ai_platform_network_get_error
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_create_and_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Run_rnn
</UL>

<P><STRONG><a name="[28d]"></a>ai_room_temp_rnn_init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, room_temp_rnn.o(.text.ai_room_temp_rnn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ai_room_temp_rnn_init &rArr; ai_platform_network_init &rArr; _platform_ai_buffer_array_copy &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;room_temp_rnn_configure_weights
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;room_temp_rnn_configure_activations
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_create_and_init
</UL>

<P><STRONG><a name="[1a9]"></a>ai_room_temp_rnn_inputs_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, room_temp_rnn.o(.text.ai_room_temp_rnn_inputs_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ai_room_temp_rnn_inputs_get &rArr; ai_platform_inputs_get &rArr; _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_inputs_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init_rnn
</UL>

<P><STRONG><a name="[1aa]"></a>ai_room_temp_rnn_outputs_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, room_temp_rnn.o(.text.ai_room_temp_rnn_outputs_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ai_room_temp_rnn_outputs_get &rArr; ai_platform_outputs_get &rArr; _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_outputs_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init_rnn
</UL>

<P><STRONG><a name="[1af]"></a>ai_room_temp_rnn_run</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, room_temp_rnn.o(.text.ai_room_temp_rnn_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ai_room_temp_rnn_run &rArr; ai_platform_network_process &rArr; _platform_network_io_bind &rArr; _platform_network_state_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Run_rnn
</UL>

<P><STRONG><a name="[88]"></a>book_counter</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, work_detector.o(.text.book_counter))
<BR>[Address Reference Count : 1]<UL><LI> work_detector.o(.text.detector_init)
</UL>
<P><STRONG><a name="[48d]"></a>clock_count_24</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, lv_dclock.o(.text.clock_count_24))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_digital_clock_timer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_digital_clock_timer
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_setting_digital_clock_timer
</UL>

<P><STRONG><a name="[86]"></a>compu_counter</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, work_detector.o(.text.compu_counter))
<BR>[Address Reference Count : 1]<UL><LI> work_detector.o(.text.detector_init)
</UL>
<P><STRONG><a name="[2a7]"></a>detector_init</STRONG> (Thumb, 200 bytes, Stack size 28 bytes, work_detector.o(.text.detector_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = detector_init &rArr; puts
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2bf]"></a>draw_border_generic</STRONG> (Thumb, 1818 bytes, Stack size 184 bytes, lv_draw_sw_rect.o(.text.draw_border_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = draw_border_generic &rArr; lv_draw_mask_radius_init &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
</UL>

<P><STRONG><a name="[8b]"></a>drink_count_analyser</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, work_detector.o(.text.drink_count_analyser))
<BR>[Address Reference Count : 1]<UL><LI> work_detector.o(.text.detector_init)
</UL>
<P><STRONG><a name="[480]"></a>events_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, events_init.o(.text.events_init))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d6]"></a>events_init_screen_guard</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, events_init.o(.text.events_init_screen_guard))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = events_init_screen_guard &rArr; lv_obj_add_event_cb &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[2d8]"></a>events_init_screen_main</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, events_init.o(.text.events_init_screen_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = events_init_screen_main &rArr; lv_obj_add_event_cb &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
</UL>

<P><STRONG><a name="[2d9]"></a>events_init_screen_work</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, events_init.o(.text.events_init_screen_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = events_init_screen_work &rArr; lv_obj_add_event_cb &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
</UL>

<P><STRONG><a name="[2da]"></a>events_init_screen_work_setting</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, events_init.o(.text.events_init_screen_work_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = events_init_screen_work_setting &rArr; lv_obj_add_event_cb &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
</UL>

<P><STRONG><a name="[1f6]"></a>fcn_to_main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fcn.o(.text.fcn_to_main))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[71]"></a>fputc</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usart.o(.text.fputc))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>game_count_analyser</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, work_detector.o(.text.game_count_analyser))
<BR>[Address Reference Count : 1]<UL><LI> work_detector.o(.text.detector_init)
</UL>
<P><STRONG><a name="[87]"></a>game_counter</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, work_detector.o(.text.game_counter))
<BR>[Address Reference Count : 1]<UL><LI> work_detector.o(.text.detector_init)
</UL>
<P><STRONG><a name="[93]"></a>game_to_lvgl_bar</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, work_detector.o(.text.game_to_lvgl_bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = game_to_lvgl_bar &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> work_detector.o(.text.detector_init)
</UL>
<P><STRONG><a name="[206]"></a>get_game_max</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, work_detector.o(.text.get_game_max))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[203]"></a>get_loss_from_usart</STRONG> (Thumb, 238 bytes, Stack size 0 bytes, pid.o(.text.get_loss_from_usart))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[205]"></a>get_work_max</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, work_detector.o(.text.get_work_max))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[20b]"></a>hard_fault_handler_c</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.hard_fault_handler_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = hard_fault_handler_c &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[90]"></a>increase_game_game</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, work_detector.o(.text.increase_game_game))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = increase_game_game &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> work_detector.o(.text.detector_init)
</UL>
<P><STRONG><a name="[92]"></a>increase_game_work</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, work_detector.o(.text.increase_game_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = increase_game_work &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> work_detector.o(.text.detector_init)
</UL>
<P><STRONG><a name="[91]"></a>increase_work_game</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, work_detector.o(.text.increase_work_game))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = increase_work_game &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> work_detector.o(.text.detector_init)
</UL>
<P><STRONG><a name="[95]"></a>increase_work_work</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, work_detector.o(.text.increase_work_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = increase_work_work &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> work_detector.o(.text.detector_init)
</UL>
<P><STRONG><a name="[309]"></a>lcd_clear</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lcd.o(.text.lcd_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lcd_clear &rArr; lcd_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_adjust
</UL>

<P><STRONG><a name="[2a8]"></a>lcd_color_fill</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, lcd.o(.text.lcd_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lcd_color_fill &rArr; lcd_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_flush
</UL>

<P><STRONG><a name="[30b]"></a>lcd_display_dir</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, lcd.o(.text.lcd_display_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lcd_display_dir &rArr; lcd_scan_dir
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_scan_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[30d]"></a>lcd_draw_circle</STRONG> (Thumb, 330 bytes, Stack size 72 bytes, lcd.o(.text.lcd_draw_circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lcd_draw_circle &rArr; lcd_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_adjust
</UL>

<P><STRONG><a name="[30e]"></a>lcd_draw_line</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, lcd.o(.text.lcd_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lcd_draw_line &rArr; lcd_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_adjust
</UL>

<P><STRONG><a name="[30f]"></a>lcd_draw_point</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd.o(.text.lcd_draw_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_draw_point &rArr; lcd_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_adjust
</UL>

<P><STRONG><a name="[310]"></a>lcd_ex_st7789_reginit</STRONG> (Thumb, 1206 bytes, Stack size 24 bytes, lcd.o(.text.lcd_ex_st7789_reginit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lcd_ex_st7789_reginit &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[311]"></a>lcd_fill</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, lcd.o(.text.lcd_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lcd_fill &rArr; lcd_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_adjust
</UL>

<P><STRONG><a name="[312]"></a>lcd_init</STRONG> (Thumb, 700 bytes, Stack size 104 bytes, lcd.o(.text.lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = lcd_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Extended_Timing_Init
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_scan_dir
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ex_st7789_reginit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[30c]"></a>lcd_scan_dir</STRONG> (Thumb, 732 bytes, Stack size 12 bytes, lcd.o(.text.lcd_scan_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lcd_scan_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_dir
</UL>

<P><STRONG><a name="[30a]"></a>lcd_set_cursor</STRONG> (Thumb, 602 bytes, Stack size 12 bytes, lcd.o(.text.lcd_set_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lcd_set_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_char
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fill
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_point
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_line
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_circle
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_color_fill
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[313]"></a>lcd_show_char</STRONG> (Thumb, 1342 bytes, Stack size 48 bytes, lcd.o(.text.lcd_show_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lcd_show_char &rArr; lcd_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
</UL>

<P><STRONG><a name="[314]"></a>lcd_show_string</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, lcd.o(.text.lcd_show_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = lcd_show_string &rArr; lcd_show_char &rArr; lcd_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_char
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_adjust
</UL>

<P><STRONG><a name="[306]"></a>lv_anim_del</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, lv_anim.o(.text.lv_anim_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = lv_anim_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_destructor
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_constructor
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_destructor
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
</UL>

<P><STRONG><a name="[315]"></a>lv_anim_get</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lv_anim.o(.text.lv_anim_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_anim_get
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_end
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[26e]"></a>lv_anim_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_anim.o(.text.lv_anim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_anim_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
</UL>

<P><STRONG><a name="[de]"></a>lv_anim_path_ease_in_out</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lv_anim.o(.text.lv_anim_path_ease_in_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_anim_path_ease_in_out &rArr; lv_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bezier3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinner.o(.text.lv_spinner_constructor)
</UL>
<P><STRONG><a name="[d3]"></a>lv_anim_path_ease_out</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lv_anim.o(.text.lv_anim_path_ease_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_anim_path_ease_out &rArr; lv_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bezier3
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_obj_scroll.o(.text.lv_obj_scroll_by)
<LI> lv_roller.o(.text.refr_position)
</UL>
<P><STRONG><a name="[ab]"></a>lv_anim_path_linear</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_anim.o(.text.lv_anim_path_linear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_anim_path_linear
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_theme_default.o(.text.style_init)
<LI> lv_anim.o(.text.lv_anim_init)
<LI> lv_style.o(.text.lv_style_transition_dsc_init)
</UL>
<P><STRONG><a name="[aa]"></a>lv_anim_path_step</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_anim.o(.text.lv_anim_path_step))
<BR>[Address Reference Count : 7]<UL><LI> lv_textarea.o(.text.lv_textarea_event)
<LI> lv_textarea.o(.text.lv_textarea_add_char)
<LI> lv_textarea.o(.text.lv_textarea_set_cursor_pos)
<LI> lv_textarea.o(.text.lv_textarea_add_text)
<LI> lv_textarea.o(.text.lv_textarea_set_text)
<LI> lv_textarea.o(.text.label_event_cb)
<LI> lv_textarea.o(.text.lv_textarea_constructor)
</UL>
<P><STRONG><a name="[3ba]"></a>lv_anim_speed_to_time</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_anim.o(.text.lv_anim_speed_to_time))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[26f]"></a>lv_anim_start</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, lv_anim.o(.text.lv_anim_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = lv_anim_start &rArr; lv_anim_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_pause
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
</UL>

<P><STRONG><a name="[323]"></a>lv_arc_set_bg_angles</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_arc.o(.text.lv_arc_set_bg_angles))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_arc_set_bg_angles &rArr; lv_arc_set_bg_start_angle &rArr; value_update &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_start_angle
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_end_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
</UL>

<P><STRONG><a name="[324]"></a>lv_arc_set_bg_end_angle</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lv_arc.o(.text.lv_arc_set_bg_end_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_arc_set_bg_end_angle &rArr; value_update &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_angles
</UL>

<P><STRONG><a name="[325]"></a>lv_arc_set_bg_start_angle</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lv_arc.o(.text.lv_arc_set_bg_start_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_arc_set_bg_start_angle &rArr; value_update &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_angles
</UL>

<P><STRONG><a name="[291]"></a>lv_arc_set_end_angle</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, lv_arc.o(.text.lv_arc_set_end_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_arc_set_end_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knob_get_extra_size
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_anim_end_angle
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
</UL>

<P><STRONG><a name="[326]"></a>lv_arc_set_rotation</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_arc.o(.text.lv_arc_set_rotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_arc_set_rotation &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
</UL>

<P><STRONG><a name="[292]"></a>lv_arc_set_start_angle</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, lv_arc.o(.text.lv_arc_set_start_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knob_get_extra_size
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_anim_start_angle
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
</UL>

<P><STRONG><a name="[235]"></a>lv_area_get_size</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_create
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
</UL>

<P><STRONG><a name="[31d]"></a>lv_area_increase</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_increase))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_transformed_area
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[368]"></a>lv_area_move</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_move))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[23f]"></a>lv_area_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_set))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[84]"></a>lv_area_set_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_set_height))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[85]"></a>lv_area_set_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_set_width))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[31c]"></a>lv_atan2</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, lv_math.o(.text.lv_atan2))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[327]"></a>lv_bar_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_bar_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_bar_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
</UL>

<P><STRONG><a name="[437]"></a>lv_bar_get_mode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_get_mode))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[43a]"></a>lv_bar_get_start_value</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_get_start_value))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[438]"></a>lv_bar_get_value</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_get_value))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_slider_led_light_event_handler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_slider_led_Light_event_handler
</UL>

<P><STRONG><a name="[32b]"></a>lv_bar_set_mode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_bar_set_mode &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
</UL>

<P><STRONG><a name="[32c]"></a>lv_bar_set_range</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_set_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_bar_set_range &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
</UL>

<P><STRONG><a name="[32d]"></a>lv_bar_set_start_value</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lv_bar.o(.text.lv_bar_set_start_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_bar_set_start_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[207]"></a>lv_bar_set_value</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lv_bar.o(.text.lv_bar_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_setting_btn_work_begin_event_handler
</UL>

<P><STRONG><a name="[316]"></a>lv_bezier3</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lv_math.o(.text.lv_bezier3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_bezier3
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_out
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_in_out
</UL>

<P><STRONG><a name="[32f]"></a>lv_btn_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_btn.o(.text.lv_btn_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_btn_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[2f1]"></a>lv_btnmatrix_clear_btn_ctrl_all</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_clear_btn_ctrl_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_btnmatrix_clear_btn_ctrl_all &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highlight_update
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_one_button_checked
</UL>

<P><STRONG><a name="[332]"></a>lv_btnmatrix_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_btnmatrix_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[338]"></a>lv_btnmatrix_get_btn_text</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_get_btn_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_btnmatrix_get_btn_text &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[29c]"></a>lv_btnmatrix_get_selected_btn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_get_selected_btn))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_get_active_btn
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
</UL>

<P><STRONG><a name="[2c9]"></a>lv_btnmatrix_has_btn_ctrl</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_has_btn_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
</UL>

<P><STRONG><a name="[2f2]"></a>lv_btnmatrix_set_btn_ctrl</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_btn_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_btnmatrix_set_btn_ctrl &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl_all
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highlight_update
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
</UL>

<P><STRONG><a name="[339]"></a>lv_btnmatrix_set_btn_ctrl_all</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_btn_ctrl_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_btnmatrix_set_btn_ctrl_all &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
</UL>

<P><STRONG><a name="[33a]"></a>lv_btnmatrix_set_ctrl_map</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_ctrl_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_btnmatrix_set_ctrl_map &rArr; lv_btnmatrix_set_map &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_ctrl_map
</UL>

<P><STRONG><a name="[331]"></a>lv_btnmatrix_set_map</STRONG> (Thumb, 884 bytes, Stack size 112 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lv_btnmatrix_set_map &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_ctrl_map
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_constructor
</UL>

<P><STRONG><a name="[33b]"></a>lv_btnmatrix_set_one_checked</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_one_checked))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_btnmatrix_set_one_checked &rArr; make_one_button_checked &rArr; lv_btnmatrix_clear_btn_ctrl_all &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_one_button_checked
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[33c]"></a>lv_btnmatrix_set_selected_btn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_set_selected_btn))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_btnmatrix_set_selected_btn &rArr; invalidate_button_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
</UL>

<P><STRONG><a name="[482]"></a>lv_calendar_get_showed_date</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_calendar.o(.text.lv_calendar_get_showed_date))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
</UL>

<P><STRONG><a name="[340]"></a>lv_calendar_set_showed_date</STRONG> (Thumb, 890 bytes, Stack size 88 bytes, lv_calendar.o(.text.lv_calendar_set_showed_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = lv_calendar_set_showed_date &rArr; highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_snprintf
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_selected_btn
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_selected_btn
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highlight_update
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
</UL>

<P><STRONG><a name="[345]"></a>lv_chart_get_point_pos_by_id</STRONG> (Thumb, 504 bytes, Stack size 64 bytes, lv_chart.o(.text.lv_chart_get_point_pos_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_chart_get_point_pos_by_id &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[2a6]"></a>lv_color_darken</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lv_color.o(.text.lv_color_darken))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dark_color_filter_cb
</UL>

<P><STRONG><a name="[369]"></a>lv_color_fill</STRONG> (Thumb, 308 bytes, Stack size 8 bytes, lv_color.o(.text.lv_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
</UL>

<P><STRONG><a name="[348]"></a>lv_color_hsv_to_rgb</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, lv_color.o(.text.lv_color_hsv_to_rgb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_color_hsv_to_rgb
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
</UL>

<P><STRONG><a name="[349]"></a>lv_dclock_create</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_dclock.o(.text.lv_dclock_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = lv_dclock_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_valid
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_set_text_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
</UL>

<P><STRONG><a name="[34b]"></a>lv_dclock_set_text_fmt</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lv_dclock.o(.text.lv_dclock_set_text_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = lv_dclock_set_text_fmt &rArr; lv_dclock_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_create
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_digital_clock_timer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_digital_clock_timer
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_setting_digital_clock_timer
</UL>

<P><STRONG><a name="[34e]"></a>lv_disp_draw_buf_init</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lv_hal_disp.o(.text.lv_disp_draw_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_disp_draw_buf_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[34f]"></a>lv_disp_drv_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lv_hal_disp.o(.text.lv_disp_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_disp_drv_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[350]"></a>lv_disp_drv_register</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, lv_hal_disp.o(.text.lv_disp_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_disp_drv_register &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_is_inited
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_get
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_ready
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[358]"></a>lv_disp_enable_invalidation</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_enable_invalidation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_enable_invalidation
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
</UL>

<P><STRONG><a name="[2a9]"></a>lv_disp_flush_ready</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_flush_ready))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_flush
</UL>

<P><STRONG><a name="[231]"></a>lv_disp_get_default</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_invalidation_enabled
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_enable_invalidation
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_load_anim_start
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>

<P><STRONG><a name="[302]"></a>lv_disp_get_dpi</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_dpi))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
</UL>

<P><STRONG><a name="[485]"></a>lv_disp_get_draw_buf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_draw_buf))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
</UL>

<P><STRONG><a name="[237]"></a>lv_disp_get_hor_res</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_hor_res))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[2f5]"></a>lv_disp_get_layer_sys</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_layer_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_sys
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
</UL>

<P><STRONG><a name="[2f7]"></a>lv_disp_get_layer_top</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_layer_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_top
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
</UL>

<P><STRONG><a name="[359]"></a>lv_disp_get_next</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_valid
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
</UL>

<P><STRONG><a name="[2f8]"></a>lv_disp_get_scr_act</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_scr_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_scr_act
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>

<P><STRONG><a name="[35a]"></a>lv_disp_get_scr_prev</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_scr_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_scr_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[35b]"></a>lv_disp_get_theme</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_theme
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[23e]"></a>lv_disp_get_ver_res</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_ver_res))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[264]"></a>lv_disp_is_invalidation_enabled</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_is_invalidation_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_is_invalidation_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[35c]"></a>lv_disp_load_scr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_disp.o(.text.lv_disp_load_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = lv_disp_load_scr &rArr; lv_scr_load_anim &rArr; lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ui
</UL>

<P><STRONG><a name="[321]"></a>lv_draw_arc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_draw_arc.o(.text.lv_draw_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_draw_arc
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[31f]"></a>lv_draw_arc_dsc_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_draw_arc.o(.text.lv_draw_arc_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_draw_arc_dsc_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[2ff]"></a>lv_draw_arc_get_area</STRONG> (Thumb, 1168 bytes, Stack size 48 bytes, lv_draw_arc.o(.text.lv_draw_arc_get_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_draw_arc_get_area
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>

<P><STRONG><a name="[2be]"></a>lv_draw_img</STRONG> (Thumb, 788 bytes, Stack size 160 bytes, lv_draw_img.o(.text.lv_draw_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_read_line
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_blend
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
</UL>

<P><STRONG><a name="[2bd]"></a>lv_draw_img_dsc_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_draw_img.o(.text.lv_draw_img_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_draw_img_dsc_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
</UL>

<P><STRONG><a name="[3a6]"></a>lv_draw_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_draw.o(.text.lv_draw_init))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2bb]"></a>lv_draw_label</STRONG> (Thumb, 2246 bytes, Stack size 248 bytes, lv_draw_label.o(.text.lv_draw_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[2ba]"></a>lv_draw_label_dsc_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_draw_label.o(.text.lv_draw_label_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_draw_label_dsc_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[487]"></a>lv_draw_layer_adjust</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_layer.o(.text.lv_draw_layer_adjust))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[488]"></a>lv_draw_layer_blend</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_layer.o(.text.lv_draw_layer_blend))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[362]"></a>lv_draw_layer_create</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lv_draw_layer.o(.text.lv_draw_layer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lv_draw_layer_create &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[364]"></a>lv_draw_layer_destroy</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_draw_layer.o(.text.lv_draw_layer_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lv_draw_layer_destroy &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_wait_for_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[2d1]"></a>lv_draw_line</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_draw_line.o(.text.lv_draw_line))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[2cd]"></a>lv_draw_line_dsc_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_draw_line.o(.text.lv_draw_line_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_draw_line_dsc_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[2ae]"></a>lv_draw_mask_add</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, lv_draw_mask.o(.text.lv_draw_mask_add))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[366]"></a>lv_draw_mask_angle_init</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, lv_draw_mask.o(.text.lv_draw_mask_angle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = lv_draw_mask_angle_init &rArr; lv_draw_mask_line_points_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
</UL>

<P><STRONG><a name="[2b1]"></a>lv_draw_mask_apply</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, lv_draw_mask.o(.text.lv_draw_mask_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_draw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[2b5]"></a>lv_draw_mask_free_param</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lv_draw_mask.o(.text.lv_draw_mask_free_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lv_draw_mask_free_param &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[2ab]"></a>lv_draw_mask_is_any</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lv_draw_mask.o(.text.lv_draw_mask_is_any))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_draw_mask_is_any &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[367]"></a>lv_draw_mask_line_points_init</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, lv_draw_mask.o(.text.lv_draw_mask_line_points_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_draw_mask_line_points_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
</UL>

<P><STRONG><a name="[2ad]"></a>lv_draw_mask_radius_init</STRONG> (Thumb, 1434 bytes, Stack size 64 bytes, lv_draw_mask.o(.text.lv_draw_mask_radius_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = lv_draw_mask_radius_init &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[36e]"></a>lv_draw_mask_remove_custom</STRONG> (Thumb, 332 bytes, Stack size 0 bytes, lv_draw_mask.o(.text.lv_draw_mask_remove_custom))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
</UL>

<P><STRONG><a name="[2b4]"></a>lv_draw_mask_remove_id</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_draw_mask.o(.text.lv_draw_mask_remove_id))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[2c4]"></a>lv_draw_rect</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lv_draw_rect.o(.text.lv_draw_rect))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[2c2]"></a>lv_draw_rect_dsc_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lv_draw_rect.o(.text.lv_draw_rect_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_draw_rect_dsc_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[be]"></a>lv_draw_sw_arc</STRONG> (Thumb, 2948 bytes, Stack size 384 bytes, lv_draw_sw_arc.o(.text.lv_draw_sw_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = lv_draw_sw_arc &rArr; lv_draw_mask_radius_init &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[b8]"></a>lv_draw_sw_bg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_draw_sw_rect.o(.text.lv_draw_sw_bg))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = lv_draw_sw_bg &rArr; draw_bg_img &rArr; lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[2b2]"></a>lv_draw_sw_blend</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lv_draw_sw_blend.o(.text.lv_draw_sw_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_draw_sw_blend &rArr; _lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[b7]"></a>lv_draw_sw_blend_basic</STRONG> (Thumb, 6450 bytes, Stack size 104 bytes, lv_draw_sw_blend.o(.text.lv_draw_sw_blend_basic))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = lv_draw_sw_blend_basic &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_fill
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[bd]"></a>lv_draw_sw_buffer_copy</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lv_draw_sw.o(.text.lv_draw_sw_buffer_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lv_draw_sw_buffer_copy &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[c4]"></a>lv_draw_sw_img_decoded</STRONG> (Thumb, 2088 bytes, Stack size 232 bytes, lv_draw_sw_img.o(.text.lv_draw_sw_img_decoded))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = lv_draw_sw_img_decoded &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_transform
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[b1]"></a>lv_draw_sw_init_ctx</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, lv_draw_sw.o(.text.lv_draw_sw_init_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_draw_sw_init_ctx &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_disp.o(.text.lv_disp_drv_init)
</UL>
<P><STRONG><a name="[c2]"></a>lv_draw_sw_layer_adjust</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lv_draw_sw_layer.o(.text.lv_draw_sw_layer_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_draw_sw_layer_adjust &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[c1]"></a>lv_draw_sw_layer_blend</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, lv_draw_sw_layer.o(.text.lv_draw_sw_layer_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = lv_draw_sw_layer_blend &rArr; lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_wait_for_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[c3]"></a>lv_draw_sw_layer_create</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, lv_draw_sw_layer.o(.text.lv_draw_sw_layer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_draw_sw_layer_create &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[bf]"></a>lv_draw_sw_layer_destroy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_draw_sw_layer.o(.text.lv_draw_sw_layer_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_draw_sw_layer_destroy &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[b9]"></a>lv_draw_sw_letter</STRONG> (Thumb, 1558 bytes, Stack size 184 bytes, lv_draw_sw_letter.o(.text.lv_draw_sw_letter))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = lv_draw_sw_letter &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_bitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[bc]"></a>lv_draw_sw_line</STRONG> (Thumb, 2296 bytes, Stack size 312 bytes, lv_draw_sw_line.o(.text.lv_draw_sw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = lv_draw_sw_line &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[bb]"></a>lv_draw_sw_polygon</STRONG> (Thumb, 1520 bytes, Stack size 112 bytes, lv_draw_sw_polygon.o(.text.lv_draw_sw_polygon))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = lv_draw_sw_polygon &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_custom
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[b6]"></a>lv_draw_sw_rect</STRONG> (Thumb, 4936 bytes, Stack size 216 bytes, lv_draw_sw_rect.o(.text.lv_draw_sw_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = lv_draw_sw_rect &rArr; draw_bg_img &rArr; lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[c0]"></a>lv_draw_sw_transform</STRONG> (Thumb, 4362 bytes, Stack size 192 bytes, lv_draw_sw_transform.o(.text.lv_draw_sw_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = lv_draw_sw_transform &rArr; lv_memset_ff
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[ba]"></a>lv_draw_sw_wait_for_finish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_draw_sw.o(.text.lv_draw_sw_wait_for_finish))
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(.text.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[36a]"></a>lv_draw_transform</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, lv_draw_transform.o(.text.lv_draw_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_draw_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
</UL>

<P><STRONG><a name="[365]"></a>lv_draw_wait_for_finish</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw.o(.text.lv_draw_wait_for_finish))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_destroy
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_blend
</UL>

<P><STRONG><a name="[371]"></a>lv_dropdown_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_dropdown_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_dropdown_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
</UL>

<P><STRONG><a name="[493]"></a>lv_dropdown_get_list</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_dropdown.o(.text.lv_dropdown_get_list))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
</UL>

<P><STRONG><a name="[483]"></a>lv_dropdown_get_selected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_dropdown.o(.text.lv_dropdown_get_selected))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_setting_btn_work_begin_event_handler
</UL>

<P><STRONG><a name="[295]"></a>lv_dropdown_open</STRONG> (Thumb, 552 bytes, Stack size 24 bytes, lv_dropdown.o(.text.lv_dropdown_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = lv_dropdown_open &rArr; lv_obj_align_to &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y2
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
</UL>

<P><STRONG><a name="[37f]"></a>lv_dropdown_set_options</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lv_dropdown.o(.text.lv_dropdown_set_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lv_dropdown_set_options &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
</UL>

<P><STRONG><a name="[381]"></a>lv_dropdown_set_selected</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_dropdown_set_selected))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lv_dropdown_set_selected &rArr; position_to_selected &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
</UL>

<P><STRONG><a name="[2a2]"></a>lv_event_get_code</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_code))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_slider_led_light_event_handler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_setting_btn_work_cancel_event_handler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_setting_btn_work_begin_event_handler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_msgbox_1_event_handler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_event_handler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_button_stop_work_event_handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_btn_handset_light_event_handler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_btn_auto_light_event_handler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_slider_led_Light_event_handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_event_handler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_btn_handset_light_event_handler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_btn_guard_mode_event_handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_btn_desk_mode_event_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_btn_chat_event_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_btn_auto_light_event_handler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_guard_btn_1_event_handler
</UL>

<P><STRONG><a name="[3e5]"></a>lv_event_get_current_target</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_current_target))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_msgbox_1_event_handler
</UL>

<P><STRONG><a name="[31e]"></a>lv_event_get_draw_ctx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_draw_ctx))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[3e6]"></a>lv_event_get_indev</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_indev))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[2c8]"></a>lv_event_get_param</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_param))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[29b]"></a>lv_event_get_target</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_target))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_close_click_event_cb
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
</UL>

<P><STRONG><a name="[3c3]"></a>lv_event_get_user_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_get_user_data))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_value_changed_event_cb
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
</UL>

<P><STRONG><a name="[260]"></a>lv_event_send</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, lv_event.o(.text.lv_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_load_internal
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_load_anim_start
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_anim_ready
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_height
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_y_anim
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_x_anim
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_anim_ready_cb
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[337]"></a>lv_event_set_ext_draw_size</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_event.o(.text.lv_event_set_ext_draw_size))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
</UL>

<P><STRONG><a name="[383]"></a>lv_extra_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_extra.o(.text.lv_extra_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_extra_init &rArr; lv_grid_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_grid_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_flex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[384]"></a>lv_flex_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_flex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_flex_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_register_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_extra_init
</UL>

<P><STRONG><a name="[11a]"></a>lv_font_get_bitmap_fmt_txt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_font_get_bitmap_fmt_txt &rArr; get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 11]<UL><LI> lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
<LI> lv_font_mi_lanting_regular_12.o(.rodata.lv_font_MI_LanTing_Regular_12)
<LI> lv_font_mi_lanting_regular_16.o(.rodata.lv_font_MI_LanTing_Regular_16)
<LI> lv_font_mi_lanting_regular_18.o(.rodata.lv_font_MI_LanTing_Regular_18)
<LI> lv_font_mi_lanting_regular_28.o(.rodata.lv_font_MI_LanTing_Regular_28)
<LI> lv_font_mi_lanting_regular_15.o(.rodata.lv_font_MI_LanTing_Regular_15)
<LI> lv_font_mi_lanting_regular_24.o(.rodata.lv_font_MI_LanTing_Regular_24)
<LI> lv_font_mi_lanting_regular_30.o(.rodata.lv_font_MI_LanTing_Regular_30)
<LI> lv_font_montserratmedium_20.o(.rodata.lv_font_montserratMedium_20)
<LI> lv_font_montserratmedium_14.o(.rodata.lv_font_montserratMedium_14)
<LI> lv_font_montserratmedium_15.o(.rodata.lv_font_montserratMedium_15)
</UL>
<P><STRONG><a name="[36d]"></a>lv_font_get_glyph_bitmap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_font.o(.text.lv_font_get_glyph_bitmap))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
</UL>

<P><STRONG><a name="[36c]"></a>lv_font_get_glyph_dsc</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lv_font.o(.text.lv_font_get_glyph_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_font_get_glyph_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>

<P><STRONG><a name="[119]"></a>lv_font_get_glyph_dsc_fmt_txt</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_font_get_glyph_dsc_fmt_txt &rArr; get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 11]<UL><LI> lv_font_montserrat_14.o(.rodata.lv_font_montserrat_14)
<LI> lv_font_mi_lanting_regular_12.o(.rodata.lv_font_MI_LanTing_Regular_12)
<LI> lv_font_mi_lanting_regular_16.o(.rodata.lv_font_MI_LanTing_Regular_16)
<LI> lv_font_mi_lanting_regular_18.o(.rodata.lv_font_MI_LanTing_Regular_18)
<LI> lv_font_mi_lanting_regular_28.o(.rodata.lv_font_MI_LanTing_Regular_28)
<LI> lv_font_mi_lanting_regular_15.o(.rodata.lv_font_MI_LanTing_Regular_15)
<LI> lv_font_mi_lanting_regular_24.o(.rodata.lv_font_MI_LanTing_Regular_24)
<LI> lv_font_mi_lanting_regular_30.o(.rodata.lv_font_MI_LanTing_Regular_30)
<LI> lv_font_montserratmedium_20.o(.rodata.lv_font_montserratMedium_20)
<LI> lv_font_montserratmedium_14.o(.rodata.lv_font_montserratMedium_14)
<LI> lv_font_montserratmedium_15.o(.rodata.lv_font_montserratMedium_15)
</UL>
<P><STRONG><a name="[277]"></a>lv_font_get_glyph_width</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, lv_font.o(.text.lv_font_get_glyph_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_font_get_glyph_width
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>

<P><STRONG><a name="[388]"></a>lv_fs_close</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_fs.o(.text.lv_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lv_fs_close &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
</UL>

<P><STRONG><a name="[389]"></a>lv_fs_get_ext</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lv_fs.o(.text.lv_fs_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_fs_get_ext &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[38a]"></a>lv_fs_open</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, lv_fs.o(.text.lv_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_fs_open &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[38b]"></a>lv_fs_read</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, lv_fs.o(.text.lv_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lv_fs_read &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[397]"></a>lv_fs_seek</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lv_fs.o(.text.lv_fs_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_fs_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[38c]"></a>lv_gradient_calculate</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, lv_draw_sw_gradient.o(.text.lv_gradient_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_gradient_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
</UL>

<P><STRONG><a name="[2b6]"></a>lv_gradient_cleanup</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_sw_gradient.o(.text.lv_gradient_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_gradient_cleanup &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[2af]"></a>lv_gradient_get</STRONG> (Thumb, 760 bytes, Stack size 48 bytes, lv_draw_sw_gradient.o(.text.lv_gradient_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lv_gradient_get &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[385]"></a>lv_grid_init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, lv_grid.o(.text.lv_grid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_grid_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_register_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_extra_init
</UL>

<P><STRONG><a name="[38d]"></a>lv_group_add_obj</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, lv_group.o(.text.lv_group_add_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_group_add_obj &rArr; lv_group_remove_obj &rArr; lv_group_focus_prev &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[38f]"></a>lv_group_focus_next</STRONG> (Thumb, 448 bytes, Stack size 32 bytes, lv_group.o(.text.lv_group_focus_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lv_group_focus_next &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[2f9]"></a>lv_group_focus_obj</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, lv_group.o(.text.lv_group_focus_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_group_focus_obj &rArr; lv_group_set_editing &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[390]"></a>lv_group_focus_prev</STRONG> (Thumb, 448 bytes, Stack size 32 bytes, lv_group.o(.text.lv_group_focus_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lv_group_focus_prev &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[3de]"></a>lv_group_get_default</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[31a]"></a>lv_group_get_editing</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_get_editing))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[39e]"></a>lv_group_get_focused</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_get_focused))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[392]"></a>lv_group_get_obj_count</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_get_obj_count))
<BR><BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[38e]"></a>lv_group_remove_obj</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, lv_group.o(.text.lv_group_remove_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_group_remove_obj &rArr; lv_group_focus_prev &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[393]"></a>lv_group_send_data</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_group.o(.text.lv_group_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_group_send_data &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_state
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[29a]"></a>lv_group_set_editing</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lv_group.o(.text.lv_group_set_editing))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_group_set_editing &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[36b]"></a>lv_img_cache_invalidate_src</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_img_cache.o(.text.lv_img_cache_invalidate_src))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_blend
</UL>

<P><STRONG><a name="[396]"></a>lv_img_cf_get_px_size</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_img_cf_get_px_size))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[395]"></a>lv_img_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_img.o(.text.lv_img_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_img_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[7a]"></a>lv_img_decoder_built_in_close</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lv_img_decoder_built_in_close &rArr; lv_fs_close &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[7d]"></a>lv_img_decoder_built_in_info</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_img_decoder_built_in_info &rArr; lv_fs_read &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[7c]"></a>lv_img_decoder_built_in_open</STRONG> (Thumb, 648 bytes, Stack size 40 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = lv_img_decoder_built_in_open &rArr; lv_fs_read &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[7b]"></a>lv_img_decoder_built_in_read_line</STRONG> (Thumb, 1744 bytes, Stack size 80 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = lv_img_decoder_built_in_read_line &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[35e]"></a>lv_img_decoder_close</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_img_decoder.o(.text.lv_img_decoder_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lv_img_decoder_close &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[2bc]"></a>lv_img_decoder_get_info</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lv_img_decoder.o(.text.lv_img_decoder_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_img_decoder_get_info &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[24c]"></a>lv_img_decoder_open</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, lv_img_decoder.o(.text.lv_img_decoder_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = lv_img_decoder_open &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
</UL>

<P><STRONG><a name="[35f]"></a>lv_img_decoder_read_line</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_img_decoder.o(.text.lv_img_decoder_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_img_decoder_read_line
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[39a]"></a>lv_img_set_angle</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, lv_img.o(.text.lv_img_set_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = lv_img_set_angle &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_enable_invalidation
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[39b]"></a>lv_img_set_pivot</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lv_img.o(.text.lv_img_set_pivot))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = lv_img_set_pivot &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_enable_invalidation
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[399]"></a>lv_img_set_src</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, lv_img.o(.text.lv_img_set_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_img_set_src &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[2b8]"></a>lv_img_src_get_type</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_img_src_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[39c]"></a>lv_indev_drv_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_hal_indev.o(.text.lv_indev_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_indev_drv_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
</UL>

<P><STRONG><a name="[39d]"></a>lv_indev_drv_register</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lv_hal_indev.o(.text.lv_indev_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_indev_drv_register &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
</UL>

<P><STRONG><a name="[257]"></a>lv_indev_get_act</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_act))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[334]"></a>lv_indev_get_next</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_hal_indev.o(.text.lv_indev_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[2d4]"></a>lv_indev_get_obj_act</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_obj_act))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[31b]"></a>lv_indev_get_point</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_point))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[3ed]"></a>lv_indev_get_scroll_dir</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_scroll_dir))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>

<P><STRONG><a name="[294]"></a>lv_indev_get_scroll_obj</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_scroll_obj))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[298]"></a>lv_indev_get_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[431]"></a>lv_indev_get_vect</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_vect))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[c9]"></a>lv_indev_read_timer_cb</STRONG> (Thumb, 2012 bytes, Stack size 56 bytes, lv_indev.o(.text.lv_indev_read_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_indev_read_timer_cb &rArr; indev_proc_release &rArr; _lv_indev_scroll_throw_handler &rArr; lv_obj_scroll_by &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_state
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_obj_count
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_editable
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_indev.o(.text.lv_indev_drv_register)
</UL>
<P><STRONG><a name="[3a1]"></a>lv_indev_reset</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, lv_indev.o(.text.lv_indev_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_indev_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[333]"></a>lv_indev_reset_long_press</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_indev.o(.text.lv_indev_reset_long_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_reset_long_press
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[434]"></a>lv_indev_scroll_throw_predict</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, lv_indev_scroll.o(.text.lv_indev_scroll_throw_predict))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_scroll_throw_predict
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[2f6]"></a>lv_indev_search_obj</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lv_indev.o(.text.lv_indev_search_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = lv_indev_search_obj &rArr;  lv_indev_search_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[347]"></a>lv_indev_wait_release</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_wait_release))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
</UL>

<P><STRONG><a name="[3a4]"></a>lv_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = lv_init &rArr; lv_extra_init &rArr; lv_grid_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_init
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_extra_init
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_timer_core_init
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>lv_keyboard_def_event_cb</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, lv_keyboard.o(.text.lv_keyboard_def_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = lv_keyboard_def_event_cb &rArr; lv_textarea_del_char &rArr; lv_textarea_add_text &rArr;  lv_textarea_add_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_selected_btn
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_btn_text
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_ctrl_map
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_text
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_one_line
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_cursor_pos
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_right
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_left
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_keyboard.o(.text.lv_keyboard_constructor)
</UL>
<P><STRONG><a name="[382]"></a>lv_label_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_label_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdownlist_constructor
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[3b5]"></a>lv_label_get_letter_on</STRONG> (Thumb, 684 bytes, Stack size 104 bytes, lv_label.o(.text.lv_label_get_letter_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_label_get_letter_on &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[3b7]"></a>lv_label_get_letter_pos</STRONG> (Thumb, 558 bytes, Stack size 88 bytes, lv_label.o(.text.lv_label_get_letter_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_label_get_letter_pos &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[433]"></a>lv_label_get_recolor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_get_recolor))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[2c7]"></a>lv_label_get_text</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_get_text))
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_text
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[475]"></a>lv_label_get_text_selection_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_get_text_selection_end))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
</UL>

<P><STRONG><a name="[474]"></a>lv_label_get_text_selection_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_get_text_selection_start))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
</UL>

<P><STRONG><a name="[3b8]"></a>lv_label_ins_text</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lv_label.o(.text.lv_label_ins_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lv_label_ins_text &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[3b9]"></a>lv_label_is_char_under_pos</STRONG> (Thumb, 612 bytes, Stack size 96 bytes, lv_label.o(.text.lv_label_is_char_under_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_label_is_char_under_pos &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[3b3]"></a>lv_label_set_long_mode</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, lv_label.o(.text.lv_label_set_long_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[1f2]"></a>lv_label_set_text</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lv_label.o(.text.lv_label_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_value_changed_event_cb
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_setting_btn_work_begin_event_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_btn_chat_event_handler
</UL>

<P><STRONG><a name="[3bb]"></a>lv_label_set_text_fmt</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lv_label.o(.text.lv_label_set_text_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
</UL>

<P><STRONG><a name="[3bc]"></a>lv_label_set_text_sel_end</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_set_text_sel_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_label_set_text_sel_end &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
</UL>

<P><STRONG><a name="[3bd]"></a>lv_label_set_text_sel_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(.text.lv_label_set_text_sel_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_label_set_text_sel_start &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
</UL>

<P><STRONG><a name="[378]"></a>lv_label_set_text_static</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_label.o(.text.lv_label_set_text_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_label_set_text_static &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[386]"></a>lv_layout_register</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_layout_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_layout_register &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_grid_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_flex_init
</UL>

<P><STRONG><a name="[2d0]"></a>lv_map</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lv_math.o(.text.lv_map))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_out
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_linear
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_in_out
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[266]"></a>lv_mem_alloc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_mem.o(.text.lv_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_create
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_ctrl_map
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_constructor
</UL>

<P><STRONG><a name="[244]"></a>lv_mem_buf_free_all</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lv_mem.o(.text.lv_mem_buf_free_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lv_mem_buf_free_all &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[2ac]"></a>lv_mem_buf_get</STRONG> (Thumb, 620 bytes, Stack size 24 bytes, lv_mem.o(.text.lv_mem_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>

<P><STRONG><a name="[2b3]"></a>lv_mem_buf_release</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, lv_mem.o(.text.lv_mem_buf_release))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>

<P><STRONG><a name="[23c]"></a>lv_mem_free</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_mem.o(.text.lv_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_destroy
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_mask_cleanup
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_destroy
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_cleanup
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_ctrl_map
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_page_destructor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_destructor
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_destructor
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_destructor
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_destructor
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_destructor
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_destructor
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_set_text_fmt
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_destructor
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_destructor
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_destructor
</UL>

<P><STRONG><a name="[3a5]"></a>lv_mem_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_mem.o(.text.lv_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_mem_init &rArr; lv_tlsf_create_with_pool &rArr; lv_tlsf_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create_with_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2ea]"></a>lv_mem_realloc</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lv_mem.o(.text.lv_mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_register_prop
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_constructor
</UL>

<P><STRONG><a name="[2dd]"></a>lv_memcpy</STRONG> (Thumb, 1778 bytes, Stack size 68 bytes, lv_mem.o(.text.lv_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_buffer_copy
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_ctrl_map
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_ctrl_map
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[2b0]"></a>lv_memset</STRONG> (Thumb, 548 bytes, Stack size 24 bytes, lv_mem.o(.text.lv_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = lv_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[242]"></a>lv_memset_00</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, lv_mem.o(.text.lv_memset_00))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_mask_cleanup
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_create
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_adjust
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_init_ctx
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_dsc_init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_transition_dsc_init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_init
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_draw_buf_init
</UL>

<P><STRONG><a name="[2c0]"></a>lv_memset_ff</STRONG> (Thumb, 418 bytes, Stack size 24 bytes, lv_mem.o(.text.lv_memset_ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = lv_memset_ff
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
</UL>

<P><STRONG><a name="[3c4]"></a>lv_menu_set_page</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, lv_menu.o(.text.lv_menu_set_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lv_menu_set_page &rArr; lv_menu_refr_main_header_mode &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_refr_main_header_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
</UL>

<P><STRONG><a name="[3ca]"></a>lv_msgbox_create</STRONG> (Thumb, 644 bytes, Stack size 32 bytes, lv_msgbox.o(.text.lv_msgbox_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_msgbox_create &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_max_width
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl_all
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
</UL>

<P><STRONG><a name="[3cc]"></a>lv_msgbox_get_active_btn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_msgbox.o(.text.lv_msgbox_get_active_btn))
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_selected_btn
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_msgbox_1_event_handler
</UL>

<P><STRONG><a name="[48f]"></a>lv_msgbox_get_btns</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_msgbox.o(.text.lv_msgbox_get_btns))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
</UL>

<P><STRONG><a name="[492]"></a>lv_msgbox_get_text</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_msgbox.o(.text.lv_msgbox_get_text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
</UL>

<P><STRONG><a name="[491]"></a>lv_msgbox_get_title</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_msgbox.o(.text.lv_msgbox_get_title))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
</UL>

<P><STRONG><a name="[2d7]"></a>lv_obj_add_event_cb</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lv_event.o(.text.lv_obj_add_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_add_event_cb &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_screen_work_setting
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_screen_work
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_screen_main
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_screen_guard
</UL>

<P><STRONG><a name="[297]"></a>lv_obj_add_flag</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, lv_obj.o(.text.lv_obj_add_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_obj_add_flag &rArr; lv_group_focus_next &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_constructor
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_value_changed_event_cb
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_refr_main_header_mode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_page_constructor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_constructor
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_constructor
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdownlist_constructor
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_constructor
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_msgbox_1_event_handler
</UL>

<P><STRONG><a name="[375]"></a>lv_obj_add_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_add_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_obj_add_state &rArr; lv_obj_set_state &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[3d1]"></a>lv_obj_add_style</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, lv_obj_style.o(.text.lv_obj_add_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_add_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
</UL>

<P><STRONG><a name="[37e]"></a>lv_obj_align</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_obj_align &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[37a]"></a>lv_obj_align_to</STRONG> (Thumb, 1762 bytes, Stack size 88 bytes, lv_obj_pos.o(.text.lv_obj_align_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = lv_obj_align_to &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[267]"></a>lv_obj_allocate_spec_attr</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_allocate_spec_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_y
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_x
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_dir
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_y_anim
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_x_anim
</UL>

<P><STRONG><a name="[3d8]"></a>lv_obj_area_is_visible</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, lv_obj_pos.o(.text.lv_obj_area_is_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_transformed_area
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
</UL>

<P><STRONG><a name="[32a]"></a>lv_obj_calculate_ext_draw_size</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, lv_obj_draw.o(.text.lv_obj_calculate_ext_draw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_calculate_ext_draw_size &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[37d]"></a>lv_obj_calculate_style_text_align</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lv_obj_style.o(.text.lv_obj_calculate_style_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_calculate_style_text_align &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>

<P><STRONG><a name="[495]"></a>lv_obj_check_type</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_check_type))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[328]"></a>lv_obj_class_create_obj</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, lv_obj_class.o(.text.lv_obj_class_create_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_class_create_obj &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_create
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_create
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_create
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_create
</UL>

<P><STRONG><a name="[329]"></a>lv_obj_class_init_obj</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, lv_obj_class.o(.text.lv_obj_class_init_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_default
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_enable_style_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_create
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_create
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_create
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_create
</UL>

<P><STRONG><a name="[3df]"></a>lv_obj_clean</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_obj_tree.o(.text.lv_obj_clean))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lv_obj_clean &rArr; lv_obj_scroll_to &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>

<P><STRONG><a name="[317]"></a>lv_obj_clear_flag</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, lv_obj.o(.text.lv_obj_clear_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_constructor
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_value_changed_event_cb
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_section_constructor
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_refr_main_header_mode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_cont_constructor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_constructor
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_constructor
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdownlist_constructor
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_constructor
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_constructor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_constructor
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_button_stop_work_event_handler
</UL>

<P><STRONG><a name="[296]"></a>lv_obj_clear_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_clear_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_obj_clear_state &rArr; lv_obj_set_state &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
</UL>

<P><STRONG><a name="[354]"></a>lv_obj_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[372]"></a>lv_obj_del</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, lv_obj_tree.o(.text.lv_obj_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_anim_ready
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_close_click_event_cb
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_destructor
</UL>

<P><STRONG><a name="[2cf]"></a>lv_obj_draw_dsc_init</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_draw_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_obj_draw_dsc_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[3db]"></a>lv_obj_enable_style_refresh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_obj_enable_style_refresh))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[319]"></a>lv_obj_event_base</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lv_event.o(.text.lv_obj_event_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_event_base
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[2a0]"></a>lv_obj_get_child</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_get_child))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
</UL>

<P><STRONG><a name="[2db]"></a>lv_obj_get_child_cnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_get_child_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
</UL>

<P><STRONG><a name="[398]"></a>lv_obj_get_click_area</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_get_click_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_get_click_area
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
</UL>

<P><STRONG><a name="[34d]"></a>lv_obj_get_content_coords</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_content_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_content_coords &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_refr_text
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
</UL>

<P><STRONG><a name="[2a4]"></a>lv_obj_get_content_height</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_content_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_content_height &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_refr_main_header_mode
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
</UL>

<P><STRONG><a name="[29f]"></a>lv_obj_get_content_width</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_content_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_content_width &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
</UL>

<P><STRONG><a name="[2e2]"></a>lv_obj_get_coords</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_coords))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[301]"></a>lv_obj_get_disp</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lv_obj_tree.o(.text.lv_obj_get_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_obj_get_disp
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_load_internal
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_load_anim_start
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_anim_ready
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_layout
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[299]"></a>lv_obj_get_group</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_group))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[a7]"></a>lv_obj_get_height</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_to_selected_cell
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.find_track_end)
</UL>
<P><STRONG><a name="[496]"></a>lv_obj_get_index</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lv_obj_tree.o(.text.lv_obj_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[3d5]"></a>lv_obj_get_local_style_prop</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, lv_obj_style.o(.text.lv_obj_get_local_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_obj_get_local_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>

<P><STRONG><a name="[252]"></a>lv_obj_get_parent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_get_parent))
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y2
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_page_constructor
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_close_click_event_cb
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_anim_ready_cb
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
</UL>

<P><STRONG><a name="[370]"></a>lv_obj_get_screen</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lv_obj_tree.o(.text.lv_obj_get_screen))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_layout
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
</UL>

<P><STRONG><a name="[25a]"></a>lv_obj_get_scroll_bottom</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_obj_get_scroll_bottom &rArr; lv_obj_get_self_height &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_height
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[256]"></a>lv_obj_get_scroll_dir</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_dir))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[2a3]"></a>lv_obj_get_scroll_end</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_obj_get_scroll_end &rArr; lv_anim_get
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
</UL>

<P><STRONG><a name="[254]"></a>lv_obj_get_scroll_left</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>

<P><STRONG><a name="[253]"></a>lv_obj_get_scroll_right</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_obj_get_scroll_right &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[25e]"></a>lv_obj_get_scroll_snap_x</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_snap_x))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>

<P><STRONG><a name="[25c]"></a>lv_obj_get_scroll_snap_y</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_snap_y))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>

<P><STRONG><a name="[259]"></a>lv_obj_get_scroll_top</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_top))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[2df]"></a>lv_obj_get_scroll_x</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_x))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cell_area
</UL>

<P><STRONG><a name="[2de]"></a>lv_obj_get_scroll_y</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scroll_y))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y2
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cell_area
</UL>

<P><STRONG><a name="[3cf]"></a>lv_obj_get_scrollbar_area</STRONG> (Thumb, 2168 bytes, Stack size 96 bytes, lv_obj_scroll.o(.text.lv_obj_get_scrollbar_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_dir
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
</UL>

<P><STRONG><a name="[3e7]"></a>lv_obj_get_scrollbar_mode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.lv_obj_get_scrollbar_mode))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[3eb]"></a>lv_obj_get_self_height</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_self_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_self_height &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>

<P><STRONG><a name="[3ec]"></a>lv_obj_get_self_width</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_get_self_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
</UL>

<P><STRONG><a name="[391]"></a>lv_obj_get_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
</UL>

<P><STRONG><a name="[3c9]"></a>lv_obj_get_style_opa_recursive</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lv_obj_style.o(.text.lv_obj_get_style_opa_recursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_get_style_opa_recursive &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
</UL>

<P><STRONG><a name="[251]"></a>lv_obj_get_style_prop</STRONG> (Thumb, 558 bytes, Stack size 48 bytes, lv_obj_style.o(.text.lv_obj_get_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_get_default
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_prop_lookup_flags
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_prop_group
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y2
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_point
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knob_get_extra_size
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_refr_text
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cell_area
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
</UL>

<P><STRONG><a name="[3da]"></a>lv_obj_get_transformed_area</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, lv_obj_pos.o(.text.lv_obj_get_transformed_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[a6]"></a>lv_obj_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_pos.o(.text.lv_obj_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_to_selected_cell
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cell_area
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.find_track_end)
</UL>
<P><STRONG><a name="[3f1]"></a>lv_obj_get_x</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_get_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_x &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
</UL>

<P><STRONG><a name="[37b]"></a>lv_obj_get_y</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_get_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_y &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[37c]"></a>lv_obj_get_y2</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_get_y2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_y2 &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[258]"></a>lv_obj_has_flag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_has_flag))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_close_click_event_cb
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
</UL>

<P><STRONG><a name="[2a1]"></a>lv_obj_has_flag_any</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_has_flag_any))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[394]"></a>lv_obj_has_state</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_has_state))
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[3a3]"></a>lv_obj_hit_test</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, lv_obj_pos.o(.text.lv_obj_hit_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_hit_test &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_state
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
</UL>

<P><STRONG><a name="[320]"></a>lv_obj_init_draw_arc_dsc</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_arc_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_obj_init_draw_arc_dsc &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[374]"></a>lv_obj_init_draw_img_dsc</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_img_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_obj_init_draw_img_dsc &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
</UL>

<P><STRONG><a name="[2c6]"></a>lv_obj_init_draw_label_dsc</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_label_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_obj_init_draw_label_dsc &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[2ce]"></a>lv_obj_init_draw_line_dsc</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_line_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_obj_init_draw_line_dsc &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[2c3]"></a>lv_obj_init_draw_rect_dsc</STRONG> (Thumb, 754 bytes, Stack size 24 bytes, lv_obj_draw.o(.text.lv_obj_init_draw_rect_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_obj_init_draw_rect_dsc &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[269]"></a>lv_obj_invalidate</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, lv_obj_pos.o(.text.lv_obj_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_invalidation_enabled
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_load_internal
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_anim_ready
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_y_anim
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_x_anim
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_selected
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_rotation
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_start_angle
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_end_angle
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_range
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_mode
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_constructor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim_ready
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_start
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_end
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ofs_y_anim
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ofs_x_anim
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_anim_ready
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_anim_exec_cb
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_set_text_fmt
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_refr_text
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[2a5]"></a>lv_obj_invalidate_area</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_invalidate_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_invalidation_enabled
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_blink_anim_cb
</UL>

<P><STRONG><a name="[3a0]"></a>lv_obj_is_editable</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, lv_obj_class.o(.text.lv_obj_is_editable))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[3cd]"></a>lv_obj_is_layout_positioned</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_is_layout_positioned))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_obj_is_layout_positioned &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>

<P><STRONG><a name="[34a]"></a>lv_obj_is_valid</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lv_obj.o(.text.lv_obj_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_obj_is_valid &rArr; obj_valid_child &rArr;  obj_valid_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_valid_child
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_create
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_digital_clock_timer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_digital_clock_timer
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_setting_digital_clock_timer
</UL>

<P><STRONG><a name="[2fe]"></a>lv_obj_is_visible</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_is_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_is_visible &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>

<P><STRONG><a name="[3ce]"></a>lv_obj_mark_layout_as_dirty</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_mark_layout_as_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_obj_mark_layout_as_dirty &rArr; lv_obj_get_disp
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
</UL>

<P><STRONG><a name="[268]"></a>lv_obj_move_children_by</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, lv_obj_pos.o(.text.lv_obj_move_children_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = lv_obj_move_children_by &rArr;  lv_obj_move_children_by (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_y_anim
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_x_anim
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[3f3]"></a>lv_obj_move_to</STRONG> (Thumb, 426 bytes, Stack size 48 bytes, lv_obj_pos.o(.text.lv_obj_move_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_obj_move_to &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
</UL>

<P><STRONG><a name="[377]"></a>lv_obj_move_to_index</STRONG> (Thumb, 558 bytes, Stack size 24 bytes, lv_obj_tree.o(.text.lv_obj_move_to_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_obj_move_to_index &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_refr_main_header_mode
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[3e3]"></a>lv_obj_readjust_scroll</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, lv_obj_scroll.o(.text.lv_obj_readjust_scroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_obj_readjust_scroll &rArr; lv_obj_scroll_by &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[3f4]"></a>lv_obj_redraw</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, lv_refr.o(.text.lv_obj_redraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = lv_obj_redraw &rArr;  refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[308]"></a>lv_obj_refr_pos</STRONG> (Thumb, 722 bytes, Stack size 48 bytes, lv_obj_pos.o(.text.lv_obj_refr_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_obj_refr_pos &rArr; lv_obj_move_to &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>

<P><STRONG><a name="[2e0]"></a>lv_obj_refr_size</STRONG> (Thumb, 2190 bytes, Stack size 88 bytes, lv_obj_pos.o(.text.lv_obj_refr_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_refr_size &rArr; lv_obj_scroll_to &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_refr_main_header_mode
</UL>

<P><STRONG><a name="[330]"></a>lv_obj_refresh_ext_draw_size</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lv_obj_draw.o(.text.lv_obj_refresh_ext_draw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[341]"></a>lv_obj_refresh_self_size</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_refresh_self_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_refresh_self_size &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_refr_text
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
</UL>

<P><STRONG><a name="[3d3]"></a>lv_obj_refresh_style</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, lv_obj_style.o(.text.lv_obj_refresh_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_prop_lookup_flags
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_local_style_prop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>

<P><STRONG><a name="[3f7]"></a>lv_obj_remove_local_style_prop</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, lv_obj_style.o(.text.lv_obj_remove_local_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_remove_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_anim_ready
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
</UL>

<P><STRONG><a name="[355]"></a>lv_obj_remove_style</STRONG> (Thumb, 558 bytes, Stack size 40 bytes, lv_obj_style.o(.text.lv_obj_remove_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[3fa]"></a>lv_obj_report_style_change</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lv_obj_style.o(.text.lv_obj_report_style_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lv_obj_report_style_change &rArr; report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[262]"></a>lv_obj_scroll_by</STRONG> (Thumb, 374 bytes, Stack size 96 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_scroll_by &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_speed_to_time
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>

<P><STRONG><a name="[3fc]"></a>lv_obj_scroll_by_bounded</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_by_bounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + In Cycle
<LI>Call Chain = lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_to_selected_cell
</UL>

<P><STRONG><a name="[3e1]"></a>lv_obj_scroll_to</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_obj_scroll_to &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
</UL>

<P><STRONG><a name="[3e8]"></a>lv_obj_scroll_to_view_recursive</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_to_view_recursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = lv_obj_scroll_to_view_recursive &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[3e9]"></a>lv_obj_scroll_to_x</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_to_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_scroll_to_x &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
</UL>

<P><STRONG><a name="[3ea]"></a>lv_obj_scroll_to_y</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_scroll_to_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_scroll_to_y &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
</UL>

<P><STRONG><a name="[3e2]"></a>lv_obj_scrollbar_invalidate</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lv_obj_scroll.o(.text.lv_obj_scrollbar_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
</UL>

<P><STRONG><a name="[318]"></a>lv_obj_set_ext_click_area</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_set_ext_click_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_obj_set_ext_click_area &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
</UL>

<P><STRONG><a name="[3c7]"></a>lv_obj_set_flex_align</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_flex.o(.text.lv_obj_set_flex_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_obj_set_flex_align &rArr; lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_page_constructor
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_cont_constructor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
</UL>

<P><STRONG><a name="[33e]"></a>lv_obj_set_flex_flow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_flex.o(.text.lv_obj_set_flex_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lv_obj_set_flex_flow &rArr; lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_section_constructor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_page_constructor
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_cont_constructor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
</UL>

<P><STRONG><a name="[33f]"></a>lv_obj_set_flex_grow</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_flex.o(.text.lv_obj_set_flex_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_set_flex_grow &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_refr_main_header_mode
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
</UL>

<P><STRONG><a name="[379]"></a>lv_obj_set_height</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_obj_set_height &rArr; lv_obj_set_style_height &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_height
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[3c5]"></a>lv_obj_set_layout</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_obj_pos.o(.text.lv_obj_set_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_set_layout &rArr; lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
</UL>

<P><STRONG><a name="[3fe]"></a>lv_obj_set_local_style_prop</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lv_obj_style.o(.text.lv_obj_set_local_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_opa
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_width
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_height
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_opa
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_line_space
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_letter_space
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_width
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_spread
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_opa
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_y
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_x
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_color
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_outline_width
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_min_width
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_max_width
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_img_opa
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_width
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_side
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_opa
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_color
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_main_stop
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_img_src
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_grad_stop
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_grad_dir
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_grad_color
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_dither_mode
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_base_dir
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_arc_width
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_arc_opa
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_arc_color
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_anim_time
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>

<P><STRONG><a name="[376]"></a>lv_obj_set_parent</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, lv_obj_tree.o(.text.lv_obj_set_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_obj_set_parent &rArr; lv_obj_readjust_scroll &rArr; lv_obj_scroll_by &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_page_constructor
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[39f]"></a>lv_obj_set_pos</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[401]"></a>lv_obj_set_scroll_dir</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_set_scroll_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_obj_set_scroll_dir &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
</UL>

<P><STRONG><a name="[402]"></a>lv_obj_set_scroll_snap_x</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_set_scroll_snap_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_obj_set_scroll_snap_x &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
</UL>

<P><STRONG><a name="[403]"></a>lv_obj_set_scroll_snap_y</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_set_scroll_snap_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_obj_set_scroll_snap_y &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
</UL>

<P><STRONG><a name="[356]"></a>lv_obj_set_scrollbar_mode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.lv_obj_set_scrollbar_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lv_obj_set_scrollbar_mode &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[3c6]"></a>lv_obj_set_size</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_obj_set_size &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_width
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_height
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[3d4]"></a>lv_obj_set_style_align</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_align &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>

<P><STRONG><a name="[407]"></a>lv_obj_set_style_anim_time</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_anim_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_anim_time &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
</UL>

<P><STRONG><a name="[408]"></a>lv_obj_set_style_arc_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_arc_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_arc_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[409]"></a>lv_obj_set_style_arc_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_arc_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_arc_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[40a]"></a>lv_obj_set_style_arc_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_arc_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_arc_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[3a8]"></a>lv_obj_set_style_base_dir</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_base_dir &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
</UL>

<P><STRONG><a name="[208]"></a>lv_obj_set_style_bg_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_bg_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_slider_led_light_event_handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_btn_handset_light_event_handler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_btn_auto_light_event_handler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_slider_led_Light_event_handler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_btn_handset_light_event_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_btn_chat_event_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_btn_auto_light_event_handler
</UL>

<P><STRONG><a name="[40b]"></a>lv_obj_set_style_bg_dither_mode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_bg_dither_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_bg_dither_mode &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
</UL>

<P><STRONG><a name="[40c]"></a>lv_obj_set_style_bg_grad_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_bg_grad_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_bg_grad_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[40d]"></a>lv_obj_set_style_bg_grad_dir</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_bg_grad_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_bg_grad_dir &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[40e]"></a>lv_obj_set_style_bg_grad_stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_bg_grad_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_bg_grad_stop &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[40f]"></a>lv_obj_set_style_bg_img_src</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_bg_img_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_bg_img_src &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[410]"></a>lv_obj_set_style_bg_main_stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_bg_main_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_bg_main_stop &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[411]"></a>lv_obj_set_style_bg_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_bg_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[412]"></a>lv_obj_set_style_border_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_border_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_border_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[413]"></a>lv_obj_set_style_border_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_border_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_border_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[414]"></a>lv_obj_set_style_border_side</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_border_side &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[415]"></a>lv_obj_set_style_border_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_border_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[400]"></a>lv_obj_set_style_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_height &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
</UL>

<P><STRONG><a name="[416]"></a>lv_obj_set_style_img_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_img_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_img_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[3ff]"></a>lv_obj_set_style_layout</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_layout
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>

<P><STRONG><a name="[3cb]"></a>lv_obj_set_style_max_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_max_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_max_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
</UL>

<P><STRONG><a name="[417]"></a>lv_obj_set_style_min_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_min_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_min_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
</UL>

<P><STRONG><a name="[418]"></a>lv_obj_set_style_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opa_scale_anim
</UL>

<P><STRONG><a name="[419]"></a>lv_obj_set_style_outline_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_outline_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_outline_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
</UL>

<P><STRONG><a name="[41a]"></a>lv_obj_set_style_pad_bottom</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_pad_bottom &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[41b]"></a>lv_obj_set_style_pad_left</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_pad_left &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[41c]"></a>lv_obj_set_style_pad_right</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_pad_right &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[41d]"></a>lv_obj_set_style_pad_top</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_pad_top &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[41e]"></a>lv_obj_set_style_radius</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_radius &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_event_handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_event_handler
</UL>

<P><STRONG><a name="[41f]"></a>lv_obj_set_style_shadow_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_shadow_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_shadow_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
</UL>

<P><STRONG><a name="[420]"></a>lv_obj_set_style_shadow_ofs_x</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_shadow_ofs_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_shadow_ofs_x &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
</UL>

<P><STRONG><a name="[421]"></a>lv_obj_set_style_shadow_ofs_y</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_shadow_ofs_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_shadow_ofs_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
</UL>

<P><STRONG><a name="[422]"></a>lv_obj_set_style_shadow_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_shadow_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_shadow_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
</UL>

<P><STRONG><a name="[423]"></a>lv_obj_set_style_shadow_spread</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_shadow_spread))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_shadow_spread &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
</UL>

<P><STRONG><a name="[424]"></a>lv_obj_set_style_shadow_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_shadow_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[425]"></a>lv_obj_set_style_text_align</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_text_align &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[426]"></a>lv_obj_set_style_text_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_text_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[427]"></a>lv_obj_set_style_text_font</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_text_font &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_btn_chat_event_handler
</UL>

<P><STRONG><a name="[428]"></a>lv_obj_set_style_text_letter_space</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_text_letter_space &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
</UL>

<P><STRONG><a name="[429]"></a>lv_obj_set_style_text_line_space</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_text_line_space &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
</UL>

<P><STRONG><a name="[42a]"></a>lv_obj_set_style_text_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_text_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_text_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[404]"></a>lv_obj_set_style_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
</UL>

<P><STRONG><a name="[3d6]"></a>lv_obj_set_style_x</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_x &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>

<P><STRONG><a name="[3d7]"></a>lv_obj_set_style_y</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(.text.lv_obj_set_style_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>

<P><STRONG><a name="[33d]"></a>lv_obj_set_width</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_obj_set_width &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_width
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[42b]"></a>lv_obj_set_x</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_obj_set_x &rArr; lv_obj_set_style_x &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_x_anim
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[2fc]"></a>lv_obj_set_y</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_set_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_y_anim
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_y_anim
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
</UL>

<P><STRONG><a name="[406]"></a>lv_obj_style_get_selector_part</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_obj_style_get_selector_part))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[405]"></a>lv_obj_style_get_selector_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj_style.o(.text.lv_obj_style_get_selector_state))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[3a2]"></a>lv_obj_transform_point</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lv_obj_pos.o(.text.lv_obj_transform_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_point
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_layer_type
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_transformed_area
</UL>

<P><STRONG><a name="[232]"></a>lv_obj_update_layout</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.lv_obj_update_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_refr_main_header_mode
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[2ee]"></a>lv_palette_darken</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_color.o(.text.lv_palette_darken))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grey_filter_cb
</UL>

<P><STRONG><a name="[2ed]"></a>lv_palette_lighten</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lv_color.o(.text.lv_palette_lighten))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grey_filter_cb
</UL>

<P><STRONG><a name="[2ca]"></a>lv_palette_main</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_color.o(.text.lv_palette_main))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[24a]"></a>lv_point_transform</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, lv_area.o(.text.lv_point_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_point_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_point
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
</UL>

<P><STRONG><a name="[42e]"></a>lv_port_disp_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lv_port_disp.o(.text.lv_port_disp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = lv_port_disp_init &rArr; lv_disp_drv_register &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_dir
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_draw_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42f]"></a>lv_port_indev_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_port_indev.o(.text.lv_port_indev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_port_indev_init &rArr; lv_indev_drv_register &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43e]"></a>lv_pow</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, lv_math.o(.text.lv_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
</UL>

<P><STRONG><a name="[35d]"></a>lv_scr_load_anim</STRONG> (Thumb, 790 bytes, Stack size 176 bytes, lv_disp.o(.text.lv_scr_load_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = lv_scr_load_anim &rArr; lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_local_style_prop
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_load_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_load_scr
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>

<P><STRONG><a name="[436]"></a>lv_slider_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_slider_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_slider_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
</UL>

<P><STRONG><a name="[2d2]"></a>lv_snprintf</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lv_printf.o(.text.lv_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = lv_snprintf &rArr; _vsnprintf &rArr;  _vsnprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
</UL>

<P><STRONG><a name="[440]"></a>lv_spinner_create</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_spinner.o(.text.lv_spinner_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_spinner_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_guard
</UL>

<P><STRONG><a name="[272]"></a>lv_style_get_prop</STRONG> (Thumb, 470 bytes, Stack size 24 bytes, lv_style.o(.text.lv_style_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_state_compare
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
</UL>

<P><STRONG><a name="[2eb]"></a>lv_style_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_style.o(.text.lv_style_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_style_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_init_style
</UL>

<P><STRONG><a name="[49b]"></a>lv_style_is_empty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style.o(.text.lv_style_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
</UL>

<P><STRONG><a name="[3f0]"></a>lv_style_prop_get_default</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, lv_style.o(.text.lv_style_prop_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>

<P><STRONG><a name="[387]"></a>lv_style_register_prop</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, lv_style.o(.text.lv_style_register_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_register_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_grid_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_flex_init
</UL>

<P><STRONG><a name="[3f8]"></a>lv_style_remove_prop</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, lv_style.o(.text.lv_style_remove_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lv_style_remove_prop &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_local_style_prop
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
</UL>

<P><STRONG><a name="[3f9]"></a>lv_style_reset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_style.o(.text.lv_style_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lv_style_reset &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_init_style
</UL>

<P><STRONG><a name="[441]"></a>lv_style_set_anim_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_anim_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_anim_time &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[442]"></a>lv_style_set_arc_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_arc_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_arc_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[443]"></a>lv_style_set_arc_rounded</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_arc_rounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_arc_rounded &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[444]"></a>lv_style_set_arc_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_arc_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_arc_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[445]"></a>lv_style_set_bg_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_bg_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
</UL>

<P><STRONG><a name="[446]"></a>lv_style_set_bg_grad_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_bg_grad_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_bg_grad_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[447]"></a>lv_style_set_bg_grad_dir</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_bg_grad_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_bg_grad_dir &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
</UL>

<P><STRONG><a name="[448]"></a>lv_style_set_bg_img_src</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_bg_img_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_bg_img_src &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[449]"></a>lv_style_set_bg_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_bg_opa &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
</UL>

<P><STRONG><a name="[44a]"></a>lv_style_set_border_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_border_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_border_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
</UL>

<P><STRONG><a name="[44b]"></a>lv_style_set_border_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_border_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_border_opa &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
</UL>

<P><STRONG><a name="[44c]"></a>lv_style_set_border_post</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_border_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_border_post &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[44d]"></a>lv_style_set_border_side</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_border_side &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
</UL>

<P><STRONG><a name="[44e]"></a>lv_style_set_border_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_border_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
</UL>

<P><STRONG><a name="[44f]"></a>lv_style_set_clip_corner</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_clip_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_clip_corner &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[450]"></a>lv_style_set_color_filter_dsc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_color_filter_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_color_filter_dsc &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[451]"></a>lv_style_set_color_filter_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_color_filter_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_color_filter_opa &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[452]"></a>lv_style_set_height</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_height &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[453]"></a>lv_style_set_line_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_line_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_line_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[454]"></a>lv_style_set_line_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_line_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[455]"></a>lv_style_set_max_height</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_max_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_max_height &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
</UL>

<P><STRONG><a name="[456]"></a>lv_style_set_max_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_max_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_max_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[457]"></a>lv_style_set_outline_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_outline_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_outline_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[458]"></a>lv_style_set_outline_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_outline_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_outline_opa &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[459]"></a>lv_style_set_outline_pad</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_outline_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_outline_pad &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[45a]"></a>lv_style_set_outline_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_outline_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_outline_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[45b]"></a>lv_style_set_pad_bottom</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_pad_bottom &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[45c]"></a>lv_style_set_pad_column</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_pad_column &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[45d]"></a>lv_style_set_pad_left</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_pad_left &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[45e]"></a>lv_style_set_pad_right</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_pad_right &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[45f]"></a>lv_style_set_pad_row</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_pad_row &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[494]"></a>lv_style_set_pad_top</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_pad_top))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[26d]"></a>lv_style_set_prop</STRONG> (Thumb, 418 bytes, Stack size 24 bytes, lv_style.o(.text.lv_style_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_width
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_height
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_align
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_spread
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_opa
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_ofs_y
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_row
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_column
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_max_width
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_max_height
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_height
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_opa
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_dsc
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_post
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_opa
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_img_src
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_color
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_rounded
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_width
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_width
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_color
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_anim_time
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_opa
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_letter_space
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_dir
</UL>

<P><STRONG><a name="[460]"></a>lv_style_set_radius</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_radius &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
</UL>

<P><STRONG><a name="[461]"></a>lv_style_set_shadow_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_shadow_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_shadow_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[462]"></a>lv_style_set_shadow_ofs_y</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_shadow_ofs_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_shadow_ofs_y &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[463]"></a>lv_style_set_shadow_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_shadow_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_shadow_opa &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[464]"></a>lv_style_set_shadow_spread</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_shadow_spread))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_shadow_spread &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[465]"></a>lv_style_set_shadow_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_shadow_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[466]"></a>lv_style_set_text_align</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_text_align &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[467]"></a>lv_style_set_text_color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_text_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
</UL>

<P><STRONG><a name="[468]"></a>lv_style_set_text_font</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_text_font &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
</UL>

<P><STRONG><a name="[469]"></a>lv_style_set_text_letter_space</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_text_letter_space &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
</UL>

<P><STRONG><a name="[46a]"></a>lv_style_set_text_line_space</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_text_line_space &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
</UL>

<P><STRONG><a name="[46b]"></a>lv_style_set_text_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_text_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_text_opa &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
</UL>

<P><STRONG><a name="[46c]"></a>lv_style_set_transform_height</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_transform_height &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[46d]"></a>lv_style_set_transform_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_transform_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[46e]"></a>lv_style_set_transition</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_transition &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[46f]"></a>lv_style_set_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(.text.lv_style_set_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_style_set_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[470]"></a>lv_style_transition_dsc_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lv_style.o(.text.lv_style_transition_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_style_transition_dsc_init &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[29d]"></a>lv_tabview_set_act</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, lv_tabview.o(.text.lv_tabview_set_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
</UL>

<P><STRONG><a name="[3ab]"></a>lv_textarea_add_char</STRONG> (Thumb, 440 bytes, Stack size 104 bytes, lv_textarea.o(.text.lv_textarea_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + In Cycle
<LI>Call Chain = lv_textarea_add_char &rArr;  lv_textarea_add_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_start
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_end
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_start
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_end
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[3aa]"></a>lv_textarea_add_text</STRONG> (Thumb, 422 bytes, Stack size 96 bytes, lv_textarea.o(.text.lv_textarea_add_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + In Cycle
<LI>Call Chain = lv_textarea_add_text &rArr;  lv_textarea_add_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_start
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_end
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_start
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_end
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[476]"></a>lv_textarea_cursor_down</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lv_textarea.o(.text.lv_textarea_cursor_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = lv_textarea_cursor_down &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[3ad]"></a>lv_textarea_cursor_left</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_cursor_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = lv_textarea_cursor_left &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
</UL>

<P><STRONG><a name="[3ae]"></a>lv_textarea_cursor_right</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_cursor_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = lv_textarea_cursor_right &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[3af]"></a>lv_textarea_del_char</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, lv_textarea.o(.text.lv_textarea_del_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = lv_textarea_del_char &rArr; lv_textarea_add_text &rArr;  lv_textarea_add_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_cut
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_start
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_end
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_start
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_end
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[3b0]"></a>lv_textarea_get_cursor_pos</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_get_cursor_pos))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[3ac]"></a>lv_textarea_get_one_line</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_get_one_line))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[3b1]"></a>lv_textarea_get_text</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_get_text))
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
</UL>

<P><STRONG><a name="[43c]"></a>lv_textarea_set_cursor_click_pos</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_textarea.o(.text.lv_textarea_set_cursor_click_pos))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_constructor
</UL>

<P><STRONG><a name="[3b2]"></a>lv_textarea_set_cursor_pos</STRONG> (Thumb, 364 bytes, Stack size 96 bytes, lv_textarea.o(.text.lv_textarea_set_cursor_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_right
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_left
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
</UL>

<P><STRONG><a name="[43b]"></a>lv_textarea_set_one_line</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lv_textarea.o(.text.lv_textarea_set_one_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lv_textarea_set_one_line &rArr; lv_obj_scroll_to &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_local_style_prop
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_min_width
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_constructor
</UL>

<P><STRONG><a name="[43f]"></a>lv_textarea_set_text</STRONG> (Thumb, 370 bytes, Stack size 96 bytes, lv_textarea.o(.text.lv_textarea_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = lv_textarea_set_text &rArr; lv_textarea_add_char &rArr;  lv_textarea_add_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_start
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_end
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_start
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_end
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
</UL>

<P><STRONG><a name="[3dc]"></a>lv_theme_apply</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_theme.o(.text.lv_theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[352]"></a>lv_theme_default_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_theme_default.o(.text.lv_theme_default_get))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[353]"></a>lv_theme_default_init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, lv_theme_default.o(.text.lv_theme_default_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lv_theme_default_init &rArr; lv_obj_report_style_change &rArr; report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[351]"></a>lv_theme_default_is_inited</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_theme_default.o(.text.lv_theme_default_is_inited))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[2cb]"></a>lv_theme_get_color_primary</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_theme.o(.text.lv_theme_get_color_primary))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_theme_get_color_primary &rArr; lv_obj_get_disp
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_constructor
</UL>

<P><STRONG><a name="[243]"></a>lv_tick_elaps</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_hal_tick.o(.text.lv_tick_elaps))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_tick_elaps
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[230]"></a>lv_tick_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_hal_tick.o(.text.lv_tick_get))
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset_long_press
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_ready
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
</UL>

<P><STRONG><a name="[229]"></a>lv_timer_create</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lv_timer.o(.text.lv_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
</UL>

<P><STRONG><a name="[478]"></a>lv_timer_handler</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, lv_timer.o(.text.lv_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = lv_timer_handler &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22c]"></a>lv_timer_pause</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_timer.o(.text.lv_timer_pause))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[357]"></a>lv_timer_ready</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_timer.o(.text.lv_timer_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_timer_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[22b]"></a>lv_timer_resume</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_timer.o(.text.lv_timer_resume))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_layout
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[479]"></a>lv_tlsf_create</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, lv_tlsf.o(.text.lv_tlsf_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_tlsf_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create_with_pool
</UL>

<P><STRONG><a name="[3c1]"></a>lv_tlsf_create_with_pool</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, lv_tlsf.o(.text.lv_tlsf_create_with_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_tlsf_create_with_pool &rArr; lv_tlsf_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_init
</UL>

<P><STRONG><a name="[3bf]"></a>lv_tlsf_free</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, lv_tlsf.o(.text.lv_tlsf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_free_all
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
</UL>

<P><STRONG><a name="[3be]"></a>lv_tlsf_malloc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_tlsf.o(.text.lv_tlsf_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>

<P><STRONG><a name="[3c0]"></a>lv_tlsf_realloc</STRONG> (Thumb, 578 bytes, Stack size 32 bytes, lv_tlsf.o(.text.lv_tlsf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
</UL>

<P><STRONG><a name="[2e8]"></a>lv_trigo_sin</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, lv_math.o(.text.lv_trigo_sin))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_transform
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_get_area
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
</UL>

<P><STRONG><a name="[2b9]"></a>lv_txt_get_size</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, lv_txt.o(.text.lv_txt_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_refr_text
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_height
</UL>

<P><STRONG><a name="[360]"></a>lv_txt_get_width</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, lv_txt.o(.text.lv_txt_get_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_txt_get_width &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[27a]"></a>lv_vsnprintf</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lv_printf.o(.text.lv_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = lv_vsnprintf &rArr; _vsnprintf &rArr;  _vsnprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
</UL>

<P><STRONG><a name="[162]"></a>main</STRONG> (Thumb, 492 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = main &rArr; setup_ui &rArr; lv_disp_load_scr &rArr; lv_scr_load_anim &rArr; lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_detector_init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detector_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init_fcn
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init_rnn
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP30_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT10_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_y
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_x
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ui
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM11_Init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[8f]"></a>mouse_counter</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, work_detector.o(.text.mouse_counter))
<BR>[Address Reference Count : 1]<UL><LI> work_detector.o(.text.detector_init)
</UL>
<P><STRONG><a name="[1ea]"></a>pid_x</STRONG> (Thumb, 280 bytes, Stack size 0 bytes, pid.o(.text.pid_x))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1eb]"></a>pid_y</STRONG> (Thumb, 268 bytes, Stack size 0 bytes, pid.o(.text.pid_y))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1f4]"></a>rnn_to_main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rnn.o(.text.rnn_to_main))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[f3]"></a>screen_main_digital_clock_timer</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, widgets_init.o(.text.screen_main_digital_clock_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = screen_main_digital_clock_timer &rArr; lv_dclock_set_text_fmt &rArr; lv_dclock_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_valid
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_set_text_fmt
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_count_24
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setup_scr_screen_main.o(.text.setup_scr_screen_main)
</UL>
<P><STRONG><a name="[f4]"></a>screen_work_digital_clock_timer</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, widgets_init.o(.text.screen_work_digital_clock_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = screen_work_digital_clock_timer &rArr; lv_dclock_set_text_fmt &rArr; lv_dclock_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_valid
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_set_text_fmt
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_count_24
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setup_scr_screen_work.o(.text.setup_scr_screen_work)
</UL>
<P><STRONG><a name="[f5]"></a>screen_work_setting_digital_clock_timer</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, widgets_init.o(.text.screen_work_setting_digital_clock_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = screen_work_setting_digital_clock_timer &rArr; lv_dclock_set_text_fmt &rArr; lv_dclock_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_valid
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_set_text_fmt
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_count_24
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setup_scr_screen_work_setting.o(.text.setup_scr_screen_work_setting)
</UL>
<P><STRONG><a name="[1f3]"></a>set_time</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, setup_scr_screen_main.o(.text.set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_time &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[f1]"></a>setup_scr_screen_guard</STRONG> (Thumb, 872 bytes, Stack size 16 bytes, setup_scr_screen_guard.o(.text.setup_scr_screen_guard))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = setup_scr_screen_guard &rArr; lv_img_set_pivot &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_opa
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_width
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_img_opa
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_width
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_side
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_opa
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_color
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_main_stop
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_grad_stop
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_grad_dir
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_grad_color
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_arc_width
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_arc_opa
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_arc_color
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_create
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_screen_guard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(.text.screen_main_btn_guard_mode_event_handler)
</UL>
<P><STRONG><a name="[ef]"></a>setup_scr_screen_main</STRONG> (Thumb, 3692 bytes, Stack size 32 bytes, setup_scr_screen_main.o(.text.setup_scr_screen_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = setup_scr_screen_main &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_opa
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_line_space
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_letter_space
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_width
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_spread
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_opa
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_y
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_x
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_color
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_outline_width
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_width
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_main_stop
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_grad_stop
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_grad_dir
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_grad_color
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_range
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_mode
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_create
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_create
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_screen_main
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ui
</UL>
<BR>[Address Reference Count : 3]<UL><LI> events_init.o(.text.screen_work_setting_btn_work_cancel_event_handler)
<LI> events_init.o(.text.screen_work_msgbox_1_event_handler)
<LI> events_init.o(.text.screen_guard_btn_1_event_handler)
</UL>
<P><STRONG><a name="[f2]"></a>setup_scr_screen_work</STRONG> (Thumb, 9560 bytes, Stack size 40 bytes, setup_scr_screen_work.o(.text.setup_scr_screen_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = setup_scr_screen_work &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_opa
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_line_space
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_letter_space
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_width
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_spread
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_opa
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_y
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_x
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_color
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_outline_width
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_width
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_main_stop
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_grad_stop
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_grad_dir
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_grad_color
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_arc_width
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_arc_opa
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_arc_color
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_anim_time
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_get_title
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_get_text
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_get_btns
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_create
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_create
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_opa
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_letter_space
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_dir
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_range
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_mode
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_create
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_create
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_screen_work
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_init_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(.text.screen_work_setting_btn_work_begin_event_handler)
</UL>
<P><STRONG><a name="[f0]"></a>setup_scr_screen_work_setting</STRONG> (Thumb, 6332 bytes, Stack size 32 bytes, setup_scr_screen_work_setting.o(.text.setup_scr_screen_work_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = setup_scr_screen_work_setting &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_opa
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_line_space
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_letter_space
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_width
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_spread
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_opa
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_y
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_x
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_color
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_width
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_side
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_opa
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_color
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_main_stop
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_grad_stop
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_grad_dir
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_grad_color
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_dither_mode
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_max_height
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_opa
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_create
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_opa
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_dir
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_list
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_create
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_screen_work_setting
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_init_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(.text.screen_main_btn_desk_mode_event_handler)
</UL>
<P><STRONG><a name="[47f]"></a>setup_ui</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gui_guider.o(.text.setup_ui))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = setup_ui &rArr; lv_disp_load_scr &rArr; lv_scr_load_anim &rArr; lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_load_scr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_main
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>stop_analyser</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, work_detector.o(.text.stop_analyser))
<BR>[Address Reference Count : 1]<UL><LI> work_detector.o(.text.detector_init)
</UL>
<P><STRONG><a name="[10]"></a>tp_adjust</STRONG> (Thumb, 2556 bytes, Stack size 168 bytes, touch.o(.text.tp_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tp_adjust &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fill
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_point
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_line
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_circle
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data.tp_dev)
</UL>
<P><STRONG><a name="[e]"></a>tp_init</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, touch.o(.text.tp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tp_init &rArr; tp_read_xoy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_read_xoy
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data.tp_dev)
</UL>
<P><STRONG><a name="[1f5]"></a>transmit_message</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, usart.o(.text.transmit_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = transmit_message &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[490]"></a>ui_init_style</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_guider.o(.text.ui_init_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ui_init_style &rArr; lv_style_reset &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work_setting
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_work
</UL>

<P><STRONG><a name="[48c]"></a>ui_load_scr_animation</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, gui_guider.o(.text.ui_load_scr_animation))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_setting_btn_work_cancel_event_handler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_setting_btn_work_begin_event_handler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_msgbox_1_event_handler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_btn_guard_mode_event_handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_main_btn_desk_mode_event_handler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_guard_btn_1_event_handler
</UL>

<P><STRONG><a name="[8e]"></a>water_counter</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, work_detector.o(.text.water_counter))
<BR>[Address Reference Count : 1]<UL><LI> work_detector.o(.text.detector_init)
</UL>
<P><STRONG><a name="[8d]"></a>work_count_analyser</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, work_detector.o(.text.work_count_analyser))
<BR>[Address Reference Count : 1]<UL><LI> work_detector.o(.text.detector_init)
</UL>
<P><STRONG><a name="[89]"></a>work_counter</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, work_detector.o(.text.work_counter))
<BR>[Address Reference Count : 1]<UL><LI> work_detector.o(.text.detector_init)
</UL>
<P><STRONG><a name="[47e]"></a>work_detector_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, work_detector.o(.text.work_detector_init))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48e]"></a>work_set</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, work_detector.o(.text.work_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = work_set &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_work_setting_btn_work_begin_event_handler
</UL>

<P><STRONG><a name="[94]"></a>work_to_lvgl_bar</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, work_detector.o(.text.work_to_lvgl_bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = work_to_lvgl_bar &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> work_detector.o(.text.detector_init)
</UL>
<P><STRONG><a name="[188]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[49d]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[49c]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[49e]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[49f]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[189]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[18a]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4a0]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[18d]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[4a2]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_erff
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanhf
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[4a1]"></a>__hardfp_erff</STRONG> (Thumb, 402 bytes, Stack size 16 bytes, erff.o(i.__hardfp_erff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_erff
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_forward_lite_nl_gelu_if32of32
</UL>

<P><STRONG><a name="[4a5]"></a>__hardfp_expf</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_sigmoid_array_f32
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_nl_softmax_if32of32_kernel
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanhf
</UL>

<P><STRONG><a name="[53a]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[1f1]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_to_lvgl_bar
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_work_work
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_game_work
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[4b3]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_forward_lite_nl_gelu_if32of32
</UL>

<P><STRONG><a name="[53b]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[4b7]"></a>__hardfp_tanhf</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, tanhf.o(i.__hardfp_tanhf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_tanhf &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_tanh_array_f32
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_forward_lite_nl_gelu_if32of32
</UL>

<P><STRONG><a name="[4b0]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4a8]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4a7]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4ad]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4aa]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4ae]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4b6]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[4a4]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_erff
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanhf
</UL>

<P><STRONG><a name="[4b5]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[4b4]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[4a6]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[4a3]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_erff
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanhf
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[176]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[4d9]"></a>ai_array_get_byte_size</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ai_datatypes_format.o(i.ai_array_get_byte_size))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
</UL>

<P><STRONG><a name="[4c6]"></a>ai_array_get_data_byte_size</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ai_datatypes_format.o(i.ai_array_get_data_byte_size))
<BR><BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[4b9]"></a>ai_array_to_buffer_fmt</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, ai_datatypes_format.o(i.ai_array_to_buffer_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_array_to_buffer_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
</UL>

<P><STRONG><a name="[280]"></a>ai_buffer_array_item_set_address</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ai_platform.o(i.ai_buffer_array_item_set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_buffer_array_item_set_address
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_sane
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_create_and_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_create_and_init
</UL>

<P><STRONG><a name="[4c3]"></a>ai_buffer_array_sane</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ai_platform.o(i.ai_buffer_array_sane))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_item_set_address
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer_array
</UL>

<P><STRONG><a name="[4c5]"></a>ai_buffer_get_size</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ai_platform.o(i.ai_buffer_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_buffer_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[4cc]"></a>ai_check_custom_types</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, layers.o(i.ai_check_custom_types))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_check_custom_types &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[4ce]"></a>ai_layers_forward_all</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, layers.o(i.ai_layers_forward_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ai_layers_forward_all &rArr; _ai_forward_layer
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_forward_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[4d6]"></a>ai_layers_init_all</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, layers.o(i.ai_layers_init_all))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
</UL>

<P><STRONG><a name="[4d7]"></a>ai_layers_post_init_all</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, layers.o(i.ai_layers_post_init_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ai_layers_post_init_all
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
</UL>

<P><STRONG><a name="[4bc]"></a>ai_math_sqrt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ai_math_helpers.o(i.ai_math_sqrt))
<BR><BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_forward_lite_nl_gelu_if32of32
</UL>

<P><STRONG><a name="[282]"></a>ai_platform_bind_network_params</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_bind_network_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_platform_bind_network_params
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_data_params_get
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_data_params_get
</UL>

<P><STRONG><a name="[4d1]"></a>ai_platform_context_acquire</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ai_platform_interface.o(i.ai_platform_context_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_outputs_get
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_inputs_get
</UL>

<P><STRONG><a name="[489]"></a>ai_platform_get_activations_map</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_get_activations_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ai_platform_get_activations_map &rArr; _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer_array
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;room_state_fcn_configure_activations
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;room_temp_rnn_configure_activations
</UL>

<P><STRONG><a name="[48b]"></a>ai_platform_get_weights_map</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_get_weights_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ai_platform_get_weights_map &rArr; _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer_array
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;room_state_fcn_configure_weights
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;room_temp_rnn_configure_weights
</UL>

<P><STRONG><a name="[288]"></a>ai_platform_inputs_get</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ai_platform_interface.o(i.ai_platform_inputs_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ai_platform_inputs_get &rArr; _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_inputs_get
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_inputs_get
</UL>

<P><STRONG><a name="[27e]"></a>ai_platform_network_create</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, ai_platform_interface.o(i.ai_platform_network_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ai_platform_network_create &rArr; ai_check_custom_types &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_init
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_version_get
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_check_custom_types
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_create
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_create
</UL>

<P><STRONG><a name="[283]"></a>ai_platform_network_get_error</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_network_get_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_platform_network_get_error
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_get_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_get_error
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_get_error
</UL>

<P><STRONG><a name="[284]"></a>ai_platform_network_init</STRONG> (Thumb, 262 bytes, Stack size 104 bytes, ai_platform_interface.o(i.ai_platform_network_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ai_platform_network_init &rArr; _platform_ai_buffer_array_copy &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_buffers_signature_valid
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_ai_buffer_array_copy
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_get_size
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_init_all
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_init
</UL>

<P><STRONG><a name="[287]"></a>ai_platform_network_post_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ai_platform_interface.o(i.ai_platform_network_post_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ai_platform_network_post_init &rArr; ai_layers_post_init_all
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_post_init_all
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_init
</UL>

<P><STRONG><a name="[28a]"></a>ai_platform_network_process</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ai_platform_interface.o(i.ai_platform_network_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ai_platform_network_process &rArr; _platform_network_io_bind &rArr; _platform_network_state_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_output
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_input
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_forward_all
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_run
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_run
</UL>

<P><STRONG><a name="[48a]"></a>ai_platform_network_set_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ai_platform_interface.o(i.ai_platform_network_set_error))
<BR><BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;room_state_fcn_configure_weights
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;room_state_fcn_configure_activations
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_outputs_get
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_inputs_get
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;room_temp_rnn_configure_weights
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;room_temp_rnn_configure_activations
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[289]"></a>ai_platform_outputs_get</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ai_platform_interface.o(i.ai_platform_outputs_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ai_platform_outputs_get &rArr; _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_outputs_get
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_outputs_get
</UL>

<P><STRONG><a name="[4d3]"></a>ai_version_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ai_datatypes_internal.o(i.ai_version_get))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[4d4]"></a>core_get_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, core_common.o(i.core_get_error))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
</UL>

<P><STRONG><a name="[4d2]"></a>core_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_common.o(i.core_init))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[4d8]"></a>core_set_error</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, core_common.o(i.core_set_error))
<BR><BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
</UL>

<P><STRONG><a name="[4ac]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[7]"></a>forward_dense</STRONG> (Thumb, 516 bytes, Stack size 128 bytes, layers_conv2d_generic_float.o(i.forward_dense))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = forward_dense &rArr; forward_lite_dense_if32of32wf32
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_dense_if32of32wf32
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_byte_size
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_dict4_dot_array_f32
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_copy
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 5]<UL><LI> room_temp_rnn.o(.data.gemm_2_layer)
<LI> room_state_fcn.o(.data.gemm_0_layer)
<LI> room_state_fcn.o(.data.gemm_2_layer)
<LI> room_state_fcn.o(.data.gemm_4_layer)
<LI> room_state_fcn.o(.data.gemm_6_layer)
</UL>
<P><STRONG><a name="[d]"></a>forward_gather</STRONG> (Thumb, 442 bytes, Stack size 120 bytes, layers_generic_float.o(i.forward_gather))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = forward_gather &rArr; st_int8_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> room_temp_rnn.o(.data.slice_1_gather_0_layer)
</UL>
<P><STRONG><a name="[b]"></a>forward_gelu</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, layers_nl_generic_float.o(i.forward_gelu))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = forward_gelu &rArr; _forward_lite_nl_gelu_if32of32 &rArr; __hardfp_tanhf &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_shape_get_size
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_forward_lite_nl_gelu_if32of32
</UL>
<BR>[Address Reference Count : 3]<UL><LI> room_state_fcn.o(.data.nl_1_layer)
<LI> room_state_fcn.o(.data.nl_3_layer)
<LI> room_state_fcn.o(.data.nl_5_layer)
</UL>
<P><STRONG><a name="[4db]"></a>forward_lite_dense_if32of32wf32</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, lite_dense_if32.o(i.forward_lite_dense_if32of32wf32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = forward_lite_dense_if32of32wf32
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ai_math_dot_array
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
</UL>

<P><STRONG><a name="[4be]"></a>forward_lite_nl_softmax_if32of32_kernel</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lite_nl_softmax_if32of32.o(i.forward_lite_nl_softmax_if32of32_kernel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = forward_lite_nl_softmax_if32of32_kernel &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_forward_lite_nl_softmax_if32of32
</UL>

<P><STRONG><a name="[8]"></a>forward_lstm</STRONG> (Thumb, 1214 bytes, Stack size 224 bytes, layers_rnn_generic_float.o(i.forward_lstm))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = forward_lstm &rArr; _lstm_cell
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lstm_cell
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_fill
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_copy
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> room_temp_rnn.o(.data.lstm_0_layer)
</UL>
<P><STRONG><a name="[c]"></a>forward_sm</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, layers_nl_generic_float.o(i.forward_sm))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = forward_sm &rArr; _forward_lite_nl_softmax_if32of32 &rArr; forward_lite_nl_softmax_if32of32_kernel &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_shape_get_size
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_forward_lite_nl_softmax_if32of32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> room_state_fcn.o(.data.nl_7_layer)
</UL>
<P><STRONG><a name="[4c7]"></a>get_tensor_byte_size</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ai_datatypes_internal.o(i.get_tensor_byte_size))
<BR><BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_setup
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[a]"></a>nl_func_sigmoid_array_f32</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, layers_nl_generic_float.o(i.nl_func_sigmoid_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nl_func_sigmoid_array_f32 &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> room_temp_rnn.o(.data.lstm_0_layer)
</UL>
<P><STRONG><a name="[9]"></a>nl_func_tanh_array_f32</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, layers_nl_generic_float.o(i.nl_func_tanh_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nl_func_tanh_array_f32 &rArr; __hardfp_tanhf &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanhf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> room_temp_rnn.o(.data.lstm_0_layer)
</UL>
<P><STRONG><a name="[4ab]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4ca]"></a>st_int8_copy</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, st_int8_fill.o(i.st_int8_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = st_int8_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lstm
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_gather
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_output
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_input
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;array_f32_identity
</UL>

<P><STRONG><a name="[4de]"></a>st_int8_fill</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, st_int8_fill.o(i.st_int8_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st_int8_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lstm
</UL>

<P><STRONG><a name="[15c]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[4a9]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[53c]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[53d]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[53e]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[53f]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[540]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1a0]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_to_lvgl_bar
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_work_work
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_work_game
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_game_work
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_game_game
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_to_lvgl_bar
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadLightIntensity
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT10_Read_predata
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[4e0]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1f0]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_game_work
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[4e3]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[4e6]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[4ea]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[1b4]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_to_lvgl_bar
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_work_work
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_game_work
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_to_lvgl_bar
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadLightIntensity
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_adjust
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[4e8]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[541]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)

<P><STRONG><a name="[4e9]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dneq
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deq
</UL>

<P><STRONG><a name="[1ed]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[4eb]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1b3]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_to_lvgl_bar
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_work_work
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_work_game
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_game_work
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_game_game
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_to_lvgl_bar
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadLightIntensity
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_adjust
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[542]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[19e]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT10_Read_predata
</UL>

<P><STRONG><a name="[543]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[544]"></a>__aeabi_cdcmpge</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)

<P><STRONG><a name="[4ec]"></a>_dcmpge</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[545]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[4ed]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[4f0]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[19f]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_to_lvgl_bar
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_work_game
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_game_work
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_game_game
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_to_lvgl_bar
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHT10_Read_predata
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[4ee]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[4e2]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[4e5]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[4b1]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4ef]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[4af]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4f1]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[4df]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[2f3]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increase_work_work
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4f3]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1ef]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_to_lvgl_bar
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_to_lvgl_bar
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_adjust
</UL>

<P><STRONG><a name="[4f4]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[546]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[4f6]"></a>_deq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[4f7]"></a>_dneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[497]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_adjust
</UL>

<P><STRONG><a name="[4f8]"></a>_dgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[547]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[4f9]"></a>_dgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[548]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[4fa]"></a>_dleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[498]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_adjust
</UL>

<P><STRONG><a name="[4fb]"></a>_dls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[4f5]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[156]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[549]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[54a]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[4e1]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[14d]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[4e7]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[4b2]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4fc]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1bf]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[1bd]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[1be]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(.text.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[72]"></a>TIM_DMADelayPulseCplt</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.TIM_DMADelayPulseCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_DMADelayPulseCplt &rArr; HAL_TIM_PWM_PulseFinishedCallback &rArr; HAL_TIM_PWM_Stop_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start_DMA)
</UL>
<P><STRONG><a name="[75]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[76]"></a>UART_DMAError</STRONG> (Thumb, 388 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.UART_DMAError))
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[78]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 350 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UART_RxCpltCallback &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[77]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.UART_DMARxHalfCplt))
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[1fa]"></a>UART_Receive_IT</STRONG> (Thumb, 248 bytes, Stack size 4 bytes, stm32f4xx_hal_uart.o(.text.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[200]"></a>UART_SetConfig</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[499]"></a>tp_read_xoy</STRONG> (Thumb, 1470 bytes, Stack size 104 bytes, touch.o(.text.tp_read_xoy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tp_read_xoy
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_scan
</UL>

<P><STRONG><a name="[f]"></a>tp_scan</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, touch.o(.text.tp_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tp_scan &rArr; tp_read_xoy
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_read_xoy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data.tp_dev)
</UL>
<P><STRONG><a name="[db]"></a>opa_scale_anim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_disp.o(.text.opa_scale_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = opa_scale_anim &rArr; lv_obj_set_style_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_opa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_disp.o(.text.lv_scr_load_anim)
</UL>
<P><STRONG><a name="[d7]"></a>scr_anim_ready</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lv_disp.o(.text.scr_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = scr_anim_ready &rArr; lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_local_style_prop
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_disp.o(.text.lv_scr_load_anim)
</UL>
<P><STRONG><a name="[d8]"></a>scr_load_anim_start</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_disp.o(.text.scr_load_anim_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = scr_load_anim_start &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_disp.o(.text.lv_scr_load_anim)
</UL>
<P><STRONG><a name="[435]"></a>scr_load_internal</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lv_disp.o(.text.scr_load_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = scr_load_internal &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
</UL>

<P><STRONG><a name="[d9]"></a>set_x_anim</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_disp.o(.text.set_x_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = set_x_anim &rArr; lv_obj_set_x &rArr; lv_obj_set_style_x &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_disp.o(.text.lv_scr_load_anim)
</UL>
<P><STRONG><a name="[da]"></a>set_y_anim</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_disp.o(.text.set_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = set_y_anim &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_disp.o(.text.lv_scr_load_anim)
</UL>
<P><STRONG><a name="[2d5]"></a>event_send_core</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, lv_event.o(.text.event_send_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>

<P><STRONG><a name="[2f4]"></a>indev_proc_press</STRONG> (Thumb, 836 bytes, Stack size 24 bytes, lv_indev.o(.text.indev_proc_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = indev_proc_press &rArr; _lv_indev_scroll_throw_handler &rArr; lv_obj_scroll_by &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[2fa]"></a>indev_proc_release</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, lv_indev.o(.text.indev_proc_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = indev_proc_release &rArr; _lv_indev_scroll_throw_handler &rArr; lv_obj_scroll_by &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_transform
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[255]"></a>elastic_diff</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, lv_indev_scroll.o(.text.elastic_diff))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = elastic_diff &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_obj_act
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
</UL>

<P><STRONG><a name="[25f]"></a>find_snap_point_x</STRONG> (Thumb, 390 bytes, Stack size 56 bytes, lv_indev_scroll.o(.text.find_snap_point_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = find_snap_point_x &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
</UL>

<P><STRONG><a name="[25d]"></a>find_snap_point_y</STRONG> (Thumb, 390 bytes, Stack size 56 bytes, lv_indev_scroll.o(.text.find_snap_point_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = find_snap_point_y &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
</UL>

<P><STRONG><a name="[12f]"></a>lv_obj_constructor</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lv_obj.o(.text.lv_obj_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_constructor &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.rodata.lv_obj_class)
</UL>
<P><STRONG><a name="[130]"></a>lv_obj_destructor</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_obj_destructor &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_event_mark_deleted
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_enable_style_refresh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.rodata.lv_obj_class)
</UL>
<P><STRONG><a name="[131]"></a>lv_obj_event</STRONG> (Thumb, 2148 bytes, Stack size 176 bytes, lv_obj.o(.text.lv_obj_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = lv_obj_event &rArr; lv_obj_scroll_to_view_recursive &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_indev
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_current_target
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_editable
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_custom
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_dir
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_mode
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.rodata.lv_obj_class)
</UL>
<P><STRONG><a name="[3d0]"></a>lv_obj_set_state</STRONG> (Thumb, 826 bytes, Stack size 80 bytes, lv_obj.o(.text.lv_obj_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_obj_set_state &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_state_compare
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_get_default
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_style_get_selector_state
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_style_get_selector_part
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[3f2]"></a>obj_valid_child</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lv_obj.o(.text.obj_valid_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = obj_valid_child &rArr;  obj_valid_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_valid_child
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_valid_child
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_valid
</UL>

<P><STRONG><a name="[3dd]"></a>lv_obj_construct</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_obj_class.o(.text.lv_obj_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_construct &rArr;  lv_obj_construct (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
</UL>

<P><STRONG><a name="[307]"></a>layout_update_core</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lv_obj_pos.o(.text.layout_update_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + In Cycle
<LI>Call Chain = layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>

<P><STRONG><a name="[42d]"></a>transform_point</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, lv_obj_pos.o(.text.transform_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = transform_point &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_transform
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
</UL>

<P><STRONG><a name="[d2]"></a>scroll_anim_ready_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_scroll.o(.text.scroll_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = scroll_anim_ready_cb &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_scroll.o(.text.lv_obj_scroll_by)
</UL>
<P><STRONG><a name="[3fd]"></a>scroll_area_into_view</STRONG> (Thumb, 808 bytes, Stack size 72 bytes, lv_obj_scroll.o(.text.scroll_area_into_view))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = scroll_area_into_view &rArr; lv_obj_scroll_by &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
</UL>

<P><STRONG><a name="[d0]"></a>scroll_x_anim</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.scroll_x_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = scroll_x_anim &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
</UL>
<BR>[Address Reference Count : 5]<UL><LI> lv_obj_scroll.o(.text.lv_obj_get_scroll_end)
<LI> lv_obj_scroll.o(.text.lv_obj_scroll_by)
<LI> lv_obj_scroll.o(.text.lv_obj_scroll_to)
<LI> lv_obj_scroll.o(.text.lv_obj_scroll_to_x)
<LI> lv_obj_scroll.o(.text.scroll_area_into_view)
</UL>
<P><STRONG><a name="[d1]"></a>scroll_y_anim</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_obj_scroll.o(.text.scroll_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = scroll_y_anim &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
</UL>
<BR>[Address Reference Count : 5]<UL><LI> lv_obj_scroll.o(.text.lv_obj_get_scroll_end)
<LI> lv_obj_scroll.o(.text.lv_obj_scroll_by)
<LI> lv_obj_scroll.o(.text.lv_obj_scroll_to)
<LI> lv_obj_scroll.o(.text.lv_obj_scroll_to_y)
<LI> lv_obj_scroll.o(.text.scroll_area_into_view)
</UL>
<P><STRONG><a name="[2e9]"></a>get_local_style</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, lv_obj_style.o(.text.get_local_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_local_style &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>

<P><STRONG><a name="[26c]"></a>get_trans_style</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, lv_obj_style.o(.text.get_trans_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_trans_style &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
</UL>

<P><STRONG><a name="[3f6]"></a>refresh_children_style</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lv_obj_style.o(.text.refresh_children_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + In Cycle
<LI>Call Chain = refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>

<P><STRONG><a name="[3fb]"></a>report_style_change_core</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lv_obj_style.o(.text.report_style_change_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + In Cycle
<LI>Call Chain = report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>

<P><STRONG><a name="[80]"></a>trans_anim_cb</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, lv_obj_style.o(.text.trans_anim_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = trans_anim_cb &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(.text._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[7e]"></a>trans_anim_ready_cb</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, lv_obj_style.o(.text.trans_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = trans_anim_ready_cb &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_is_empty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(.text._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[7f]"></a>trans_anim_start_cb</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_obj_style.o(.text.trans_anim_start_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = trans_anim_start_cb &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(.text._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[3d2]"></a>trans_del</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, lv_obj_style.o(.text.trans_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = trans_del &rArr; lv_anim_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
</UL>

<P><STRONG><a name="[3e0]"></a>obj_del_core</STRONG> (Thumb, 772 bytes, Stack size 24 bytes, lv_obj_tree.o(.text.obj_del_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + In Cycle
<LI>Call Chain = obj_del_core &rArr;  obj_del_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_obj_act
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_destruct
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[430]"></a>lv_refr_get_top_obj</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lv_refr.o(.text.lv_refr_get_top_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = lv_refr_get_top_obj &rArr;  lv_refr_get_top_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_layer_type
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
</UL>

<P><STRONG><a name="[240]"></a>refr_area_part</STRONG> (Thumb, 2634 bytes, Stack size 208 bytes, lv_refr.o(.text.refr_area_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = refr_area_part &rArr; lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[3f5]"></a>refr_obj</STRONG> (Thumb, 892 bytes, Stack size 104 bytes, lv_refr.o(.text.refr_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = refr_obj &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_transformed_area
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_layer_type
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_destroy
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_blend
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_adjust
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
</UL>

<P><STRONG><a name="[486]"></a>refr_obj_and_children</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lv_refr.o(.text.refr_obj_and_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = refr_obj_and_children &rArr; refr_obj &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
</UL>

<P><STRONG><a name="[290]"></a>apply_theme</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lv_theme.o(.text.apply_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = apply_theme &rArr;  apply_theme (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>

<P><STRONG><a name="[f9]"></a>color_blend_true_color_additive</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, lv_draw_sw_blend.o(.text.color_blend_true_color_additive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = color_blend_true_color_additive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_blend.o(.rodata..Lswitch.table.lv_draw_sw_blend_basic.4)
</UL>
<P><STRONG><a name="[fb]"></a>color_blend_true_color_multiply</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, lv_draw_sw_blend.o(.text.color_blend_true_color_multiply))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = color_blend_true_color_multiply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_blend.o(.rodata..Lswitch.table.lv_draw_sw_blend_basic.4)
</UL>
<P><STRONG><a name="[fa]"></a>color_blend_true_color_subtractive</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, lv_draw_sw_blend.o(.text.color_blend_true_color_subtractive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = color_blend_true_color_subtractive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_blend.o(.rodata..Lswitch.table.lv_draw_sw_blend_basic.4)
</UL>
<P><STRONG><a name="[2aa]"></a>draw_bg</STRONG> (Thumb, 1406 bytes, Stack size 152 bytes, lv_draw_sw_rect.o(.text.draw_bg))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = draw_bg &rArr; lv_draw_mask_radius_init &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_cleanup
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_bg
</UL>

<P><STRONG><a name="[2b7]"></a>draw_bg_img</STRONG> (Thumb, 554 bytes, Stack size 96 bytes, lv_draw_sw_rect.o(.text.draw_bg_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = draw_bg_img &rArr; lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_bg
</UL>

<P><STRONG><a name="[36f]"></a>shadow_blur_corner</STRONG> (Thumb, 1678 bytes, Stack size 160 bytes, lv_draw_sw_rect.o(.text.shadow_blur_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = shadow_blur_corner &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
</UL>

<P><STRONG><a name="[b3]"></a>lv_draw_mask_angle</STRONG> (Thumb, 868 bytes, Stack size 40 bytes, lv_draw_mask.o(.text.lv_draw_mask_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lv_draw_mask_angle &rArr; lv_draw_mask_line &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(.text.lv_draw_mask_angle_init)
</UL>
<P><STRONG><a name="[b4]"></a>lv_draw_mask_line</STRONG> (Thumb, 1460 bytes, Stack size 32 bytes, lv_draw_mask.o(.text.lv_draw_mask_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lv_draw_mask_line &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(.text.lv_draw_mask_line_points_init)
</UL>
<P><STRONG><a name="[b5]"></a>lv_draw_mask_radius</STRONG> (Thumb, 1162 bytes, Stack size 56 bytes, lv_draw_mask.o(.text.lv_draw_mask_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lv_draw_mask_radius &rArr; lv_memset_00 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(.text.lv_draw_mask_radius_init)
</UL>
<P><STRONG><a name="[29e]"></a>children_repos</STRONG> (Thumb, 1528 bytes, Stack size 88 bytes, lv_flex.o(.text.children_repos))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = children_repos &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[2dc]"></a>find_track_end</STRONG> (Thumb, 664 bytes, Stack size 48 bytes, lv_flex.o(.text.find_track_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = find_track_end &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[c5]"></a>flex_update</STRONG> (Thumb, 1188 bytes, Stack size 128 bytes, lv_flex.o(.text.flex_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = flex_update &rArr; lv_obj_refr_size &rArr; lv_obj_scroll_to &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.lv_flex_init)
</UL>
<P><STRONG><a name="[82]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_area_get_height))
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[83]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_flex.o(.text.lv_area_get_width))
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(.text.children_repos)
</UL>
<P><STRONG><a name="[2ef]"></a>grid_align</STRONG> (Thumb, 756 bytes, Stack size 36 bytes, lv_grid.o(.text.grid_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = grid_align
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[c8]"></a>grid_update</STRONG> (Thumb, 3598 bytes, Stack size 128 bytes, lv_grid.o(.text.grid_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = grid_update &rArr; lv_obj_refr_size &rArr; lv_obj_scroll_to &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_align
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_width
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_grid.o(.text.lv_grid_init)
</UL>
<P><STRONG><a name="[f7]"></a>dark_color_filter_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_theme_default.o(.text.dark_color_filter_cb))
<BR><BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[f6]"></a>grey_filter_cb</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lv_theme_default.o(.text.grey_filter_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = grey_filter_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_lighten
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_darken
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.style_init)
</UL>
<P><STRONG><a name="[477]"></a>style_init</STRONG> (Thumb, 13206 bytes, Stack size 32 bytes, lv_theme_default.o(.text.style_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = style_init &rArr; lv_style_set_transition &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_transition_dsc_init
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_width
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_height
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_align
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_spread
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_opa
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_ofs_y
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_row
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_column
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_max_width
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_max_height
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_height
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_opa
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_dsc
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_post
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_opa
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_img_src
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_color
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_rounded
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_width
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_width
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_color
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_anim_time
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_lighten
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_darken
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[e7]"></a>theme_apply</STRONG> (Thumb, 4368 bytes, Stack size 24 bytes, lv_theme_default.o(.text.theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = theme_apply &rArr; lv_obj_add_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_check_type
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(.text.lv_theme_default_init)
</UL>
<P><STRONG><a name="[b0]"></a>draw_part_begin_event_cb</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, lv_calendar.o(.text.draw_part_begin_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = draw_part_begin_event_cb &rArr; lv_theme_get_color_primary &rArr; lv_obj_get_disp
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_has_btn_ctrl
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_selected_btn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar.o(.text.lv_calendar_constructor)
</UL>
<P><STRONG><a name="[2f0]"></a>highlight_update</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, lv_calendar.o(.text.highlight_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
</UL>

<P><STRONG><a name="[105]"></a>lv_calendar_constructor</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, lv_calendar.o(.text.lv_calendar_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = lv_calendar_constructor &rArr; lv_calendar_set_showed_date &rArr; highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl_all
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highlight_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar.o(.rodata.lv_calendar_class)
</UL>
<P><STRONG><a name="[e9]"></a>month_event_cb</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lv_calendar_header_arrow.o(.text.month_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = month_event_cb &rArr; lv_calendar_set_showed_date &rArr; highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_arrow.o(.text.my_constructor)
</UL>
<P><STRONG><a name="[106]"></a>my_constructor</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, lv_calendar_header_arrow.o(.text.my_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = my_constructor &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_img_src
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_arrow.o(.rodata.lv_calendar_header_arrow_class)
</UL>
<P><STRONG><a name="[ea]"></a>value_changed_event_cb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_calendar_header_arrow.o(.text.value_changed_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = value_changed_event_cb &rArr; lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_arrow.o(.text.my_constructor)
</UL>
<P><STRONG><a name="[ec]"></a>month_event_cb</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_calendar_header_dropdown.o(.text.month_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = month_event_cb &rArr; lv_calendar_set_showed_date &rArr; highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_selected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_dropdown.o(.text.my_constructor)
</UL>
<P><STRONG><a name="[107]"></a>my_constructor</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, lv_calendar_header_dropdown.o(.text.my_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = my_constructor &rArr; lv_dropdown_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_dropdown.o(.rodata.lv_calendar_header_dropdown_class)
</UL>
<P><STRONG><a name="[ed]"></a>value_changed_event_cb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_calendar_header_dropdown.o(.text.value_changed_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = value_changed_event_cb &rArr; lv_dropdown_set_selected &rArr; position_to_selected &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_selected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_dropdown.o(.text.my_constructor)
</UL>
<P><STRONG><a name="[eb]"></a>year_event_cb</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_calendar_header_dropdown.o(.text.year_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = year_event_cb &rArr; lv_calendar_set_showed_date &rArr; highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_selected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_dropdown.o(.text.my_constructor)
</UL>
<P><STRONG><a name="[2cc]"></a>draw_x_ticks</STRONG> (Thumb, 944 bytes, Stack size 232 bytes, lv_chart.o(.text.draw_x_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = draw_x_ticks &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_snprintf
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[2d3]"></a>draw_y_ticks</STRONG> (Thumb, 784 bytes, Stack size 248 bytes, lv_chart.o(.text.draw_y_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = draw_y_ticks &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_snprintf
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[303]"></a>invalidate_point</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, lv_chart.o(.text.invalidate_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = invalidate_point &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[108]"></a>lv_chart_constructor</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lv_chart.o(.text.lv_chart_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_chart_constructor
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_chart.o(.rodata.lv_chart_class)
</UL>
<P><STRONG><a name="[109]"></a>lv_chart_destructor</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lv_chart.o(.text.lv_chart_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = lv_chart_destructor &rArr; _lv_ll_clear &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_chart.o(.rodata.lv_chart_class)
</UL>
<P><STRONG><a name="[10a]"></a>lv_chart_event</STRONG> (Thumb, 4938 bytes, Stack size 360 bytes, lv_chart.o(.text.lv_chart_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lv_chart_event &rArr; draw_y_ticks &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_chart.o(.rodata.lv_chart_class)
</UL>
<P><STRONG><a name="[10e]"></a>lv_colorwheel_constructor</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lv_colorwheel.o(.text.lv_colorwheel_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_colorwheel_constructor &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_colorwheel.o(.rodata.lv_colorwheel_class)
</UL>
<P><STRONG><a name="[10f]"></a>lv_colorwheel_event</STRONG> (Thumb, 3116 bytes, Stack size 200 bytes, lv_colorwheel.o(.text.lv_colorwheel_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_colorwheel_event &rArr; refr_knob_pos &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_wait_release
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hsv_to_rgb
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_atan2
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_colorwheel.o(.rodata.lv_colorwheel_class)
</UL>
<P><STRONG><a name="[346]"></a>refr_knob_pos</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, lv_colorwheel.o(.text.refr_knob_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = refr_knob_pos &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_constructor
</UL>

<P><STRONG><a name="[11e]"></a>lv_keyboard_constructor</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, lv_keyboard.o(.text.lv_keyboard_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_keyboard_constructor &rArr; lv_keyboard_update_ctrl_map &rArr; lv_btnmatrix_set_ctrl_map &rArr; lv_btnmatrix_set_map &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_base_dir
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_ctrl_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_keyboard.o(.rodata.lv_keyboard_class)
</UL>
<P><STRONG><a name="[3a9]"></a>lv_keyboard_update_ctrl_map</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, lv_keyboard.o(.text.lv_keyboard_update_ctrl_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_keyboard_update_ctrl_map &rArr; lv_btnmatrix_set_ctrl_map &rArr; lv_btnmatrix_set_map &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_ctrl_map
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[122]"></a>lv_led_constructor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_led.o(.text.lv_led_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_led_constructor &rArr; lv_theme_get_color_primary &rArr; lv_obj_get_disp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_led.o(.rodata.lv_led_class)
</UL>
<P><STRONG><a name="[123]"></a>lv_led_event</STRONG> (Thumb, 828 bytes, Stack size 168 bytes, lv_led.o(.text.lv_led_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_led_event &rArr; lv_obj_init_draw_rect_dsc &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_led.o(.rodata.lv_led_class)
</UL>
<P><STRONG><a name="[cd]"></a>lv_menu_back_event_cb</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, lv_menu.o(.text.lv_menu_back_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = lv_menu_back_event_cb &rArr; lv_menu_set_page &rArr; lv_menu_refr_main_header_mode &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.text.lv_menu_constructor)
</UL>
<P><STRONG><a name="[126]"></a>lv_menu_constructor</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, lv_menu.o(.text.lv_menu_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_menu_constructor &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_layout
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.rodata.lv_menu_class)
</UL>
<P><STRONG><a name="[128]"></a>lv_menu_cont_constructor</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_menu.o(.text.lv_menu_cont_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_menu_cont_constructor &rArr; lv_obj_set_flex_align &rArr; lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.rodata.lv_menu_cont_class)
</UL>
<P><STRONG><a name="[127]"></a>lv_menu_destructor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_menu.o(.text.lv_menu_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lv_menu_destructor &rArr; _lv_ll_clear &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.rodata.lv_menu_class)
</UL>
<P><STRONG><a name="[129]"></a>lv_menu_page_constructor</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_menu.o(.text.lv_menu_page_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_menu_page_constructor &rArr; lv_obj_set_parent &rArr; lv_obj_readjust_scroll &rArr; lv_obj_scroll_by &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.rodata.lv_menu_page_class)
</UL>
<P><STRONG><a name="[12a]"></a>lv_menu_page_destructor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_menu.o(.text.lv_menu_page_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lv_menu_page_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.rodata.lv_menu_page_class)
</UL>
<P><STRONG><a name="[3c8]"></a>lv_menu_refr_main_header_mode</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, lv_menu.o(.text.lv_menu_refr_main_header_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lv_menu_refr_main_header_mode &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
</UL>

<P><STRONG><a name="[12b]"></a>lv_menu_section_constructor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_menu.o(.text.lv_menu_section_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_menu_section_constructor &rArr; lv_obj_set_flex_flow &rArr; lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.rodata.lv_menu_section_class)
</UL>
<P><STRONG><a name="[ce]"></a>lv_menu_value_changed_event_cb</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lv_menu.o(.text.lv_menu_value_changed_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_menu_value_changed_event_cb &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.text.lv_menu_constructor)
</UL>
<P><STRONG><a name="[12c]"></a>lv_meter_constructor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_meter.o(.text.lv_meter_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_meter_constructor
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_meter.o(.rodata.lv_meter_class)
</UL>
<P><STRONG><a name="[12d]"></a>lv_meter_destructor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_meter.o(.text.lv_meter_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lv_meter_destructor &rArr; _lv_ll_clear &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_meter.o(.rodata.lv_meter_class)
</UL>
<P><STRONG><a name="[12e]"></a>lv_meter_event</STRONG> (Thumb, 2188 bytes, Stack size 400 bytes, lv_meter.o(.text.lv_meter_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = lv_meter_event &rArr; lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_transform
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_dsc_init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_snprintf
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_meter.o(.rodata.lv_meter_class)
</UL>
<P><STRONG><a name="[cf]"></a>msgbox_close_click_event_cb</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_msgbox.o(.text.msgbox_close_click_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = msgbox_close_click_event_cb &rArr; lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_msgbox.o(.text.lv_msgbox_create)
</UL>
<P><STRONG><a name="[137]"></a>lv_spinbox_constructor</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lv_spinbox.o(.text.lv_spinbox_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = lv_spinbox_constructor &rArr; lv_spinbox_updatevalue &rArr; lv_textarea_set_text &rArr; lv_textarea_add_char &rArr;  lv_textarea_add_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_click_pos
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinbox.o(.rodata.lv_spinbox_class)
</UL>
<P><STRONG><a name="[138]"></a>lv_spinbox_event</STRONG> (Thumb, 854 bytes, Stack size 16 bytes, lv_spinbox.o(.text.lv_spinbox_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = lv_spinbox_event &rArr; lv_spinbox_updatevalue &rArr; lv_textarea_set_text &rArr; lv_textarea_add_char &rArr;  lv_textarea_add_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_text
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_left
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_pow
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinbox.o(.rodata.lv_spinbox_class)
</UL>
<P><STRONG><a name="[43d]"></a>lv_spinbox_updatevalue</STRONG> (Thumb, 580 bytes, Stack size 72 bytes, lv_spinbox.o(.text.lv_spinbox_updatevalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = lv_spinbox_updatevalue &rArr; lv_textarea_set_text &rArr; lv_textarea_add_char &rArr;  lv_textarea_add_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_snprintf
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_constructor
</UL>

<P><STRONG><a name="[dd]"></a>arc_anim_end_angle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_spinner.o(.text.arc_anim_end_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = arc_anim_end_angle &rArr; lv_arc_set_end_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinner.o(.text.lv_spinner_constructor)
</UL>
<P><STRONG><a name="[df]"></a>arc_anim_start_angle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_spinner.o(.text.arc_anim_start_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = arc_anim_start_angle &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinner.o(.text.lv_spinner_constructor)
</UL>
<P><STRONG><a name="[139]"></a>lv_spinner_constructor</STRONG> (Thumb, 136 bytes, Stack size 88 bytes, lv_spinner.o(.text.lv_spinner_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_spinner_constructor &rArr; lv_arc_set_bg_angles &rArr; lv_arc_set_bg_start_angle &rArr; value_update &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_rotation
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_angles
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinner.o(.rodata.lv_spinner_class)
</UL>
<P><STRONG><a name="[e2]"></a>btns_value_changed_event_cb</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lv_tabview.o(.text.btns_value_changed_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = btns_value_changed_event_cb &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_selected_btn
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.text.lv_tabview_constructor)
</UL>
<P><STRONG><a name="[e3]"></a>cont_scroll_end_event_cb</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, lv_tabview.o(.text.cont_scroll_end_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = cont_scroll_end_event_cb &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_end
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.text.lv_tabview_constructor)
</UL>
<P><STRONG><a name="[140]"></a>lv_tabview_constructor</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, lv_tabview.o(.text.lv_tabview_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_tabview_constructor &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_default
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_y
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_x
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_one_checked
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.rodata.lv_tabview_class)
</UL>
<P><STRONG><a name="[141]"></a>lv_tabview_destructor</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lv_tabview.o(.text.lv_tabview_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lv_tabview_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.rodata.lv_tabview_class)
</UL>
<P><STRONG><a name="[142]"></a>lv_tabview_event</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_tabview.o(.text.lv_tabview_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = lv_tabview_event &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.rodata.lv_tabview_class)
</UL>
<P><STRONG><a name="[146]"></a>lv_tileview_constructor</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lv_tileview.o(.text.lv_tileview_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_tileview_constructor &rArr; lv_obj_set_size &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_y
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tileview.o(.rodata.lv_tileview_class)
</UL>
<P><STRONG><a name="[147]"></a>lv_tileview_tile_constructor</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lv_tileview.o(.text.lv_tileview_tile_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lv_tileview_tile_constructor &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_dir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tileview.o(.rodata.lv_tileview_tile_class)
</UL>
<P><STRONG><a name="[e8]"></a>tileview_event_cb</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, lv_tileview.o(.text.tileview_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tileview_event_cb &rArr; lv_obj_get_y &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_dir
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_end
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tileview.o(.text.lv_tileview_constructor)
</UL>
<P><STRONG><a name="[148]"></a>lv_win_constructor</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lv_win.o(.text.lv_win_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_win_constructor &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_win.o(.rodata.lv_win_class)
</UL>
<P><STRONG><a name="[2e5]"></a>get_glyph_dsc_id</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, lv_font_fmt_txt.o(.text.get_glyph_dsc_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
</UL>

<P><STRONG><a name="[c7]"></a>kern_pair_16_compare</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text.kern_pair_16_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
</UL>
<P><STRONG><a name="[c6]"></a>kern_pair_8_compare</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text.kern_pair_8_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
</UL>
<P><STRONG><a name="[a8]"></a>unicode_list_compare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text.unicode_list_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(.text.get_glyph_dsc_id)
</UL>
<P><STRONG><a name="[79]"></a>anim_timer</STRONG> (Thumb, 424 bytes, Stack size 40 bytes, lv_anim.o(.text.anim_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = anim_timer &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_pause
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_anim.o(.text._lv_anim_core_init)
</UL>
<P><STRONG><a name="[27b]"></a>_ntoa_format</STRONG> (Thumb, 506 bytes, Stack size 48 bytes, lv_printf.o(.text._ntoa_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _ntoa_format
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[dc]"></a>_out_buffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_printf.o(.text._out_buffer))
<BR>[Address Reference Count : 2]<UL><LI> lv_printf.o(.text.lv_vsnprintf)
<LI> lv_printf.o(.text.lv_snprintf)
</UL>
<P><STRONG><a name="[81]"></a>_out_null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_printf.o(.text._out_null))
<BR>[Address Reference Count : 1]<UL><LI> lv_printf.o(.text._vsnprintf)
</UL>
<P><STRONG><a name="[27c]"></a>_vsnprintf</STRONG> (Thumb, 2638 bytes, Stack size 136 bytes, lv_printf.o(.text._vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = _vsnprintf &rArr;  _vsnprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_snprintf
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vsnprintf
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[47b]"></a>block_locate_free</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, lv_tlsf.o(.text.block_locate_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_locate_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
</UL>

<P><STRONG><a name="[47a]"></a>block_merge_next</STRONG> (Thumb, 198 bytes, Stack size 20 bytes, lv_tlsf.o(.text.block_merge_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = block_merge_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
</UL>

<P><STRONG><a name="[47c]"></a>block_prepare_used</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, lv_tlsf.o(.text.block_prepare_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_prepare_used
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
</UL>

<P><STRONG><a name="[6]"></a>lv_txt_unicode_to_utf8</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, lv_txt.o(.text.lv_txt_unicode_to_utf8))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_unicode_to_encoded)
</UL>
<P><STRONG><a name="[2]"></a>lv_txt_utf8_get_byte_id</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lv_txt.o(.text.lv_txt_utf8_get_byte_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_byte_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_encoded_get_byte_id)
</UL>
<P><STRONG><a name="[3]"></a>lv_txt_utf8_get_char_id</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, lv_txt.o(.text.lv_txt_utf8_get_char_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_txt_utf8_get_char_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_encoded_get_char_id)
</UL>
<P><STRONG><a name="[5]"></a>lv_txt_utf8_get_length</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lv_txt.o(.text.lv_txt_utf8_get_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_get_encoded_length)
</UL>
<P><STRONG><a name="[1]"></a>lv_txt_utf8_next</STRONG> (Thumb, 234 bytes, Stack size 12 bytes, lv_txt.o(.text.lv_txt_utf8_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_txt_utf8_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[4]"></a>lv_txt_utf8_prev</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lv_txt.o(.text.lv_txt_utf8_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_prev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_encoded_prev)
</UL>
<P><STRONG><a name="[0]"></a>lv_txt_utf8_size</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lv_txt.o(.text.lv_txt_utf8_size))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[2e4]"></a>get_center</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, lv_arc.o(.text.get_center))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_center &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>

<P><STRONG><a name="[2e7]"></a>get_knob_area</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, lv_arc.o(.text.get_knob_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_knob_area &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[2fd]"></a>inv_arc_area</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, lv_arc.o(.text.inv_arc_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_get_area
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_start_angle
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_end_angle
</UL>

<P><STRONG><a name="[304]"></a>knob_get_extra_size</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, lv_arc.o(.text.knob_get_extra_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = knob_get_extra_size &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[fc]"></a>lv_arc_constructor</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lv_arc.o(.text.lv_arc_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_arc_constructor &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_arc.o(.rodata.lv_arc_class)
</UL>
<P><STRONG><a name="[fd]"></a>lv_arc_event</STRONG> (Thumb, 1902 bytes, Stack size 208 bytes, lv_arc.o(.text.lv_arc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lv_arc_event &rArr; value_update &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_dsc_init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_atan2
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knob_get_extra_size
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knob_area
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_arc.o(.rodata.lv_arc_class)
</UL>
<P><STRONG><a name="[322]"></a>value_update</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, lv_arc.o(.text.value_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = value_update &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_start_angle
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_end_angle
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[ad]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_area_get_height))
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_event)
</UL>
<P><STRONG><a name="[ac]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_area_get_width))
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_event)
</UL>
<P><STRONG><a name="[ae]"></a>lv_bar_anim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_bar_anim &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_set_value_with_anim)
</UL>
<P><STRONG><a name="[af]"></a>lv_bar_anim_ready</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_bar_anim_ready &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_set_value_with_anim)
</UL>
<P><STRONG><a name="[fe]"></a>lv_bar_constructor</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lv_bar.o(.text.lv_bar_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_bar_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.rodata.lv_bar_class)
</UL>
<P><STRONG><a name="[ff]"></a>lv_bar_destructor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_bar_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lv_bar_destructor &rArr; lv_anim_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.rodata.lv_bar_class)
</UL>
<P><STRONG><a name="[100]"></a>lv_bar_event</STRONG> (Thumb, 1606 bytes, Stack size 304 bytes, lv_bar.o(.text.lv_bar_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lv_bar_event &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.rodata.lv_bar_class)
</UL>
<P><STRONG><a name="[32e]"></a>lv_bar_set_value_with_anim</STRONG> (Thumb, 132 bytes, Stack size 88 bytes, lv_bar.o(.text.lv_bar_set_value_with_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
</UL>

<P><STRONG><a name="[101]"></a>lv_btn_constructor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_btn.o(.text.lv_btn_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_btn_constructor &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btn.o(.rodata.lv_btn_class)
</UL>
<P><STRONG><a name="[2e1]"></a>get_button_from_point</STRONG> (Thumb, 424 bytes, Stack size 88 bytes, lv_btnmatrix.o(.text.get_button_from_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = get_button_from_point &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[300]"></a>invalidate_button_area</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, lv_btnmatrix.o(.text.invalidate_button_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = invalidate_button_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_selected_btn
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_one_button_checked
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[102]"></a>lv_btnmatrix_constructor</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lv_btnmatrix_constructor &rArr; lv_btnmatrix_set_map &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
</UL>
<P><STRONG><a name="[103]"></a>lv_btnmatrix_destructor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lv_btnmatrix_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
</UL>
<P><STRONG><a name="[104]"></a>lv_btnmatrix_event</STRONG> (Thumb, 3024 bytes, Stack size 352 bytes, lv_btnmatrix.o(.text.lv_btnmatrix_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = lv_btnmatrix_event &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset_long_press
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_one_button_checked
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btnmatrix.o(.rodata.lv_btnmatrix_class)
</UL>
<P><STRONG><a name="[336]"></a>make_one_button_checked</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lv_btnmatrix.o(.text.make_one_button_checked))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = make_one_button_checked &rArr; lv_btnmatrix_clear_btn_ctrl_all &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_one_checked
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[10b]"></a>lv_checkbox_constructor</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_checkbox_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_checkbox_constructor &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_checkbox.o(.rodata.lv_checkbox_class)
</UL>
<P><STRONG><a name="[10c]"></a>lv_checkbox_destructor</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_checkbox.o(.text.lv_checkbox_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lv_checkbox_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_checkbox.o(.rodata.lv_checkbox_class)
</UL>
<P><STRONG><a name="[10d]"></a>lv_checkbox_event</STRONG> (Thumb, 740 bytes, Stack size 264 bytes, lv_checkbox.o(.text.lv_checkbox_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lv_checkbox_event &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_checkbox.o(.rodata.lv_checkbox_class)
</UL>
<P><STRONG><a name="[293]"></a>btn_release_handler</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, lv_dropdown.o(.text.btn_release_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = btn_release_handler &rArr; lv_dropdown_open &rArr; lv_obj_align_to &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[2c1]"></a>draw_box</STRONG> (Thumb, 180 bytes, Stack size 96 bytes, lv_dropdown.o(.text.draw_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = draw_box &rArr; lv_obj_init_draw_rect_dsc &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
</UL>

<P><STRONG><a name="[2c5]"></a>draw_box_label</STRONG> (Thumb, 210 bytes, Stack size 80 bytes, lv_dropdown.o(.text.draw_box_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = draw_box_label &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
</UL>

<P><STRONG><a name="[113]"></a>lv_dropdown_constructor</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, lv_dropdown.o(.text.lv_dropdown_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_dropdown_constructor &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdown_class)
</UL>
<P><STRONG><a name="[114]"></a>lv_dropdown_destructor</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_dropdown_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = lv_dropdown_destructor &rArr; lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdown_class)
</UL>
<P><STRONG><a name="[115]"></a>lv_dropdown_event</STRONG> (Thumb, 1382 bytes, Stack size 144 bytes, lv_dropdown.o(.text.lv_dropdown_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = lv_dropdown_event &rArr; btn_release_handler &rArr; lv_dropdown_open &rArr; lv_obj_align_to &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_obj_act
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_release_handler
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdown_class)
</UL>
<P><STRONG><a name="[118]"></a>lv_dropdown_list_event</STRONG> (Thumb, 652 bytes, Stack size 40 bytes, lv_dropdown.o(.text.lv_dropdown_list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lv_dropdown_list_event &rArr; draw_box_label &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdownlist_class)
</UL>
<P><STRONG><a name="[116]"></a>lv_dropdownlist_constructor</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_dropdown.o(.text.lv_dropdownlist_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_dropdownlist_constructor &rArr; lv_label_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdownlist_class)
</UL>
<P><STRONG><a name="[117]"></a>lv_dropdownlist_destructor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_dropdown.o(.text.lv_dropdownlist_destructor))
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.rodata.lv_dropdownlist_class)
</UL>
<P><STRONG><a name="[373]"></a>position_to_selected</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lv_dropdown.o(.text.position_to_selected))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = position_to_selected &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_selected
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[11b]"></a>lv_img_constructor</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lv_img.o(.text.lv_img_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_img_constructor &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(.rodata.lv_img_class)
</UL>
<P><STRONG><a name="[11c]"></a>lv_img_destructor</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_img.o(.text.lv_img_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lv_img_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(.rodata.lv_img_class)
</UL>
<P><STRONG><a name="[11d]"></a>lv_img_event</STRONG> (Thumb, 2024 bytes, Stack size 144 bytes, lv_img.o(.text.lv_img_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = lv_img_event &rArr; lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_click_area
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(.rodata.lv_img_class)
</UL>
<P><STRONG><a name="[11f]"></a>lv_label_constructor</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_label_constructor &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.rodata.lv_label_class)
</UL>
<P><STRONG><a name="[120]"></a>lv_label_destructor</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_label.o(.text.lv_label_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lv_label_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.rodata.lv_label_class)
</UL>
<P><STRONG><a name="[121]"></a>lv_label_event</STRONG> (Thumb, 1314 bytes, Stack size 96 bytes, lv_label.o(.text.lv_label_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = lv_label_event &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.rodata.lv_label_class)
</UL>
<P><STRONG><a name="[3b4]"></a>lv_label_refr_text</STRONG> (Thumb, 1376 bytes, Stack size 136 bytes, lv_label.o(.text.lv_label_refr_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_speed_to_time
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[cb]"></a>set_ofs_x_anim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(.text.set_ofs_x_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = set_ofs_x_anim &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_label.o(.text.lv_label_refr_text)
<LI> lv_label.o(.text.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[cc]"></a>set_ofs_y_anim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(.text.set_ofs_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = set_ofs_y_anim &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_label.o(.text.lv_label_refr_text)
<LI> lv_label.o(.text.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[124]"></a>lv_line_constructor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_line.o(.text.lv_line_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_line_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_line.o(.rodata.lv_line_class)
</UL>
<P><STRONG><a name="[125]"></a>lv_line_event</STRONG> (Thumb, 638 bytes, Stack size 64 bytes, lv_line.o(.text.lv_line_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_line_event &rArr; lv_obj_init_draw_line_dsc &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_line.o(.rodata.lv_line_class)
</UL>
<P><STRONG><a name="[2fb]"></a>inf_normalize</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, lv_roller.o(.text.inf_normalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_anim_ready_cb
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[132]"></a>lv_roller_constructor</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, lv_roller.o(.text.lv_roller_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lv_roller_constructor &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(.rodata.lv_roller_class)
</UL>
<P><STRONG><a name="[133]"></a>lv_roller_event</STRONG> (Thumb, 1870 bytes, Stack size 152 bytes, lv_roller.o(.text.lv_roller_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = lv_roller_event &rArr; refr_position &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_vect
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_scroll_throw_predict
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_recolor
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(.rodata.lv_roller_class)
</UL>
<P><STRONG><a name="[134]"></a>lv_roller_label_event</STRONG> (Thumb, 552 bytes, Stack size 104 bytes, lv_roller.o(.text.lv_roller_label_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = lv_roller_label_event &rArr; refr_position &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_recolor
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(.rodata.lv_roller_label_class)
</UL>
<P><STRONG><a name="[432]"></a>refr_position</STRONG> (Thumb, 314 bytes, Stack size 104 bytes, lv_roller.o(.text.refr_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = refr_position &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[ee]"></a>scroll_anim_ready_cb</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_roller.o(.text.scroll_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = scroll_anim_ready_cb &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(.text.refr_position)
</UL>
<P><STRONG><a name="[d6]"></a>set_y_anim</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_roller.o(.text.set_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = set_y_anim &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_roller.o(.text.refr_position)
<LI> lv_roller.o(.text.lv_roller_event)
</UL>
<P><STRONG><a name="[135]"></a>lv_slider_constructor</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, lv_slider.o(.text.lv_slider_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_slider_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_slider.o(.rodata.lv_slider_class)
</UL>
<P><STRONG><a name="[136]"></a>lv_slider_event</STRONG> (Thumb, 1984 bytes, Stack size 240 bytes, lv_slider.o(.text.lv_slider_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = lv_slider_event &rArr; lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_value
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_start_value
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_mode
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_slider.o(.rodata.lv_slider_class)
</UL>
<P><STRONG><a name="[439]"></a>position_knob</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, lv_slider.o(.text.position_knob))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = position_knob &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[e0]"></a>lv_switch_anim_exec_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_switch.o(.text.lv_switch_anim_exec_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_switch_anim_exec_cb &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_switch.o(.text.lv_switch_event)
</UL>
<P><STRONG><a name="[e1]"></a>lv_switch_anim_ready</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_switch.o(.text.lv_switch_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_switch_anim_ready &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_switch.o(.text.lv_switch_event)
</UL>
<P><STRONG><a name="[13a]"></a>lv_switch_constructor</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_switch.o(.text.lv_switch_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_switch_constructor &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_switch.o(.rodata.lv_switch_class)
</UL>
<P><STRONG><a name="[13b]"></a>lv_switch_destructor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_switch.o(.text.lv_switch_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = lv_switch_destructor &rArr; lv_anim_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_switch.o(.rodata.lv_switch_class)
</UL>
<P><STRONG><a name="[13c]"></a>lv_switch_event</STRONG> (Thumb, 670 bytes, Stack size 176 bytes, lv_switch.o(.text.lv_switch_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lv_switch_event &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_switch.o(.rodata.lv_switch_class)
</UL>
<P><STRONG><a name="[2e3]"></a>get_cell_area</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, lv_table.o(.text.get_cell_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_cell_area &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_to_selected_cell
</UL>

<P><STRONG><a name="[2ec]"></a>get_row_height</STRONG> (Thumb, 292 bytes, Stack size 88 bytes, lv_table.o(.text.get_row_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = get_row_height &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
</UL>

<P><STRONG><a name="[13d]"></a>lv_table_constructor</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lv_table.o(.text.lv_table_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lv_table_constructor &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_table.o(.rodata.lv_table_class)
</UL>
<P><STRONG><a name="[13e]"></a>lv_table_destructor</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lv_table.o(.text.lv_table_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lv_table_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_table.o(.rodata.lv_table_class)
</UL>
<P><STRONG><a name="[13f]"></a>lv_table_event</STRONG> (Thumb, 2302 bytes, Stack size 408 bytes, lv_table.o(.text.lv_table_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = lv_table_event &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_to_selected_cell
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_table.o(.rodata.lv_table_class)
</UL>
<P><STRONG><a name="[471]"></a>refr_size_form_row</STRONG> (Thumb, 248 bytes, Stack size 72 bytes, lv_table.o(.text.refr_size_form_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = refr_size_form_row &rArr; get_row_height &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_height
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[472]"></a>scroll_to_selected_cell</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lv_table.o(.text.scroll_to_selected_cell))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = scroll_to_selected_cell &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cell_area
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[a9]"></a>cursor_blink_anim_cb</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lv_textarea.o(.text.cursor_blink_anim_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = cursor_blink_anim_cb &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>
<BR>[Address Reference Count : 4]<UL><LI> lv_textarea.o(.text.lv_textarea_event)
<LI> lv_textarea.o(.text.lv_textarea_set_cursor_pos)
<LI> lv_textarea.o(.text.label_event_cb)
<LI> lv_textarea.o(.text.lv_textarea_constructor)
</UL>
<P><STRONG><a name="[e6]"></a>label_event_cb</STRONG> (Thumb, 156 bytes, Stack size 88 bytes, lv_textarea.o(.text.label_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = label_event_cb &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.text.lv_textarea_constructor)
</UL>
<P><STRONG><a name="[143]"></a>lv_textarea_constructor</STRONG> (Thumb, 238 bytes, Stack size 96 bytes, lv_textarea.o(.text.lv_textarea_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = lv_textarea_constructor &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.rodata.lv_textarea_class)
</UL>
<P><STRONG><a name="[144]"></a>lv_textarea_destructor</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_textarea.o(.text.lv_textarea_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lv_textarea_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.rodata.lv_textarea_class)
</UL>
<P><STRONG><a name="[145]"></a>lv_textarea_event</STRONG> (Thumb, 1434 bytes, Stack size 160 bytes, lv_textarea.o(.text.lv_textarea_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = lv_textarea_event &rArr; lv_textarea_del_char &rArr; lv_textarea_add_text &rArr;  lv_textarea_add_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_vect
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.rodata.lv_textarea_class)
</UL>
<P><STRONG><a name="[473]"></a>pwd_char_hider</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, lv_textarea.o(.text.pwd_char_hider))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = pwd_char_hider &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider_anim_ready
</UL>

<P><STRONG><a name="[e4]"></a>pwd_char_hider_anim</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_textarea.o(.text.pwd_char_hider_anim))
<BR>[Address Reference Count : 3]<UL><LI> lv_textarea.o(.text.lv_textarea_add_char)
<LI> lv_textarea.o(.text.lv_textarea_add_text)
<LI> lv_textarea.o(.text.lv_textarea_set_text)
</UL>
<P><STRONG><a name="[e5]"></a>pwd_char_hider_anim_ready</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_textarea.o(.text.pwd_char_hider_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = pwd_char_hider_anim_ready &rArr; pwd_char_hider &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_textarea.o(.text.lv_textarea_add_char)
<LI> lv_textarea.o(.text.lv_textarea_add_text)
<LI> lv_textarea.o(.text.lv_textarea_set_text)
</UL>
<P><STRONG><a name="[305]"></a>refr_cursor_area</STRONG> (Thumb, 532 bytes, Stack size 72 bytes, lv_textarea.o(.text.refr_cursor_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = refr_cursor_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
</UL>

<P><STRONG><a name="[110]"></a>lv_dclock_constructor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_dclock.o(.text.lv_dclock_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_dclock_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dclock.o(.rodata.lv_dclock_class)
</UL>
<P><STRONG><a name="[111]"></a>lv_dclock_destructor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_dclock.o(.text.lv_dclock_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lv_dclock_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dclock.o(.rodata.lv_dclock_class)
</UL>
<P><STRONG><a name="[112]"></a>lv_dclock_event</STRONG> (Thumb, 434 bytes, Stack size 88 bytes, lv_dclock.o(.text.lv_dclock_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lv_dclock_event &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_refr_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dclock.o(.rodata.lv_dclock_class)
</UL>
<P><STRONG><a name="[34c]"></a>lv_dclock_refr_text</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, lv_dclock.o(.text.lv_dclock_refr_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_dclock_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_set_text_fmt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
</UL>

<P><STRONG><a name="[d4]"></a>disp_flush</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_port_disp.o(.text.disp_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = disp_flush &rArr; lcd_color_fill &rArr; lcd_set_cursor
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_color_fill
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_flush_ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_disp.o(.text.lv_port_disp_init)
</UL>
<P><STRONG><a name="[d5]"></a>touchpad_read</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_port_indev.o(.text.touchpad_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchpad_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_indev.o(.text.lv_port_indev_init)
</UL>
<P><STRONG><a name="[28f]"></a>room_temp_rnn_configure_activations</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, room_temp_rnn.o(.text.room_temp_rnn_configure_activations))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = room_temp_rnn_configure_activations &rArr; ai_platform_get_activations_map &rArr; _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_activations_map
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_init
</UL>

<P><STRONG><a name="[28e]"></a>room_temp_rnn_configure_weights</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, room_temp_rnn.o(.text.room_temp_rnn_configure_weights))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = room_temp_rnn_configure_weights &rArr; ai_platform_get_weights_map &rArr; _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_weights_map
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_temp_rnn_init
</UL>

<P><STRONG><a name="[286]"></a>room_state_fcn_configure_activations</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, room_state_fcn.o(.text.room_state_fcn_configure_activations))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = room_state_fcn_configure_activations &rArr; ai_platform_get_activations_map &rArr; _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_activations_map
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_init
</UL>

<P><STRONG><a name="[285]"></a>room_state_fcn_configure_weights</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, room_state_fcn.o(.text.room_state_fcn_configure_weights))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = room_state_fcn_configure_weights &rArr; ai_platform_get_weights_map &rArr; _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_weights_map
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_room_state_fcn_init
</UL>

<P><STRONG><a name="[96]"></a>screen_guard_btn_1_event_handler</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, events_init.o(.text.screen_guard_btn_1_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = screen_guard_btn_1_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(.text.events_init_screen_guard)
</UL>
<P><STRONG><a name="[9c]"></a>screen_main_btn_auto_light_event_handler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, events_init.o(.text.screen_main_btn_auto_light_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = screen_main_btn_auto_light_event_handler &rArr; lv_obj_set_style_bg_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(.text.events_init_screen_main)
</UL>
<P><STRONG><a name="[9d]"></a>screen_main_btn_chat_event_handler</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, events_init.o(.text.screen_main_btn_chat_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = screen_main_btn_chat_event_handler &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(.text.events_init_screen_main)
</UL>
<P><STRONG><a name="[99]"></a>screen_main_btn_desk_mode_event_handler</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, events_init.o(.text.screen_main_btn_desk_mode_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = screen_main_btn_desk_mode_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(.text.events_init_screen_main)
</UL>
<P><STRONG><a name="[98]"></a>screen_main_btn_guard_mode_event_handler</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, events_init.o(.text.screen_main_btn_guard_mode_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = screen_main_btn_guard_mode_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(.text.events_init_screen_main)
</UL>
<P><STRONG><a name="[9b]"></a>screen_main_btn_handset_light_event_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, events_init.o(.text.screen_main_btn_handset_light_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = screen_main_btn_handset_light_event_handler &rArr; lv_obj_set_style_bg_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(.text.events_init_screen_main)
</UL>
<P><STRONG><a name="[97]"></a>screen_main_event_handler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, events_init.o(.text.screen_main_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = screen_main_event_handler &rArr; lv_obj_set_style_radius &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(.text.events_init_screen_main)
</UL>
<P><STRONG><a name="[9a]"></a>screen_main_slider_led_Light_event_handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, events_init.o(.text.screen_main_slider_led_Light_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = screen_main_slider_led_Light_event_handler &rArr; lv_obj_set_style_bg_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(.text.events_init_screen_main)
</UL>
<P><STRONG><a name="[a2]"></a>screen_work_btn_auto_light_event_handler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, events_init.o(.text.screen_work_btn_auto_light_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = screen_work_btn_auto_light_event_handler &rArr; lv_obj_set_style_bg_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(.text.events_init_screen_work)
</UL>
<P><STRONG><a name="[a1]"></a>screen_work_btn_handset_light_event_handler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, events_init.o(.text.screen_work_btn_handset_light_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = screen_work_btn_handset_light_event_handler &rArr; lv_obj_set_style_bg_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(.text.events_init_screen_work)
</UL>
<P><STRONG><a name="[9f]"></a>screen_work_button_stop_work_event_handler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, events_init.o(.text.screen_work_button_stop_work_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = screen_work_button_stop_work_event_handler &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(.text.events_init_screen_work)
</UL>
<P><STRONG><a name="[9e]"></a>screen_work_event_handler</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, events_init.o(.text.screen_work_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = screen_work_event_handler &rArr; lv_obj_set_style_radius &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(.text.events_init_screen_work)
</UL>
<P><STRONG><a name="[a3]"></a>screen_work_msgbox_1_event_handler</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, events_init.o(.text.screen_work_msgbox_1_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = screen_work_msgbox_1_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_current_target
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_msgbox_get_active_btn
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(.text.events_init_screen_work)
</UL>
<P><STRONG><a name="[a4]"></a>screen_work_setting_btn_work_begin_event_handler</STRONG> (Thumb, 452 bytes, Stack size 56 bytes, events_init.o(.text.screen_work_setting_btn_work_begin_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = screen_work_setting_btn_work_begin_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_set
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_selected
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(.text.events_init_screen_work_setting)
</UL>
<P><STRONG><a name="[a5]"></a>screen_work_setting_btn_work_cancel_event_handler</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, events_init.o(.text.screen_work_setting_btn_work_cancel_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = screen_work_setting_btn_work_cancel_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_del &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(.text.events_init_screen_work_setting)
</UL>
<P><STRONG><a name="[a0]"></a>screen_work_slider_led_light_event_handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, events_init.o(.text.screen_work_slider_led_light_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = screen_work_slider_led_light_event_handler &rArr; lv_obj_set_style_bg_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(.text.events_init_screen_work)
</UL>
<P><STRONG><a name="[4b8]"></a>_ai_platform_get_io_buffers_info</STRONG> (Thumb, 218 bytes, Stack size 136 bytes, ai_platform_interface.o(i._ai_platform_get_io_buffers_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_to_buffer_fmt
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_outputs_get
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_inputs_get
</UL>

<P><STRONG><a name="[4c1]"></a>_platform_ai_buffer_array_copy</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ai_platform_interface.o(i._platform_ai_buffer_array_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _platform_ai_buffer_array_copy &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
</UL>

<P><STRONG><a name="[4d0]"></a>_platform_get_table_map_from_buffer</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, ai_platform_interface.o(i._platform_get_table_map_from_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _platform_get_table_map_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_weights_map
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_activations_map
</UL>

<P><STRONG><a name="[4c2]"></a>_platform_get_table_map_from_buffer_array</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ai_platform_interface.o(i._platform_get_table_map_from_buffer_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_sane
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_weights_map
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_activations_map
</UL>

<P><STRONG><a name="[4d5]"></a>_platform_network_buffers_signature_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ai_platform_interface.o(i._platform_network_buffers_signature_valid))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
</UL>

<P><STRONG><a name="[4c4]"></a>_platform_network_io_bind</STRONG> (Thumb, 528 bytes, Stack size 48 bytes, ai_platform_interface.o(i._platform_network_io_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _platform_network_io_bind &rArr; _platform_network_state_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_setup
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_get_size
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tensor_byte_size
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_to_buffer_fmt
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_data_byte_size
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[4c8]"></a>_platform_network_state_setup</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ai_platform_interface.o(i._platform_network_state_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _platform_network_state_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tensor_byte_size
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[4c9]"></a>_platform_network_state_update_input</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ai_platform_interface.o(i._platform_network_state_update_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _platform_network_state_update_input &rArr; st_int8_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[4cb]"></a>_platform_network_state_update_output</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ai_platform_interface.o(i._platform_network_state_update_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _platform_network_state_update_output &rArr; st_int8_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[4da]"></a>_ai_dict4_dot_array_f32</STRONG> (Thumb, 294 bytes, Stack size 20 bytes, layers_conv2d_generic_float.o(i._ai_dict4_dot_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _ai_dict4_dot_array_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
</UL>

<P><STRONG><a name="[4bb]"></a>_forward_lite_nl_gelu_if32of32</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, layers_nl_generic_float.o(i._forward_lite_nl_gelu_if32of32))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _forward_lite_nl_gelu_if32of32 &rArr; __hardfp_tanhf &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_math_sqrt
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_erff
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanhf
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_gelu
</UL>

<P><STRONG><a name="[4bd]"></a>_forward_lite_nl_softmax_if32of32</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, layers_nl_generic_float.o(i._forward_lite_nl_softmax_if32of32))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _forward_lite_nl_softmax_if32of32 &rArr; forward_lite_nl_softmax_if32of32_kernel &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_nl_softmax_if32of32_kernel
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_sm
</UL>

<P><STRONG><a name="[4dc]"></a>ai_shape_get_size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, layers_nl_generic_float.o(i.ai_shape_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_sm
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_gelu
</UL>

<P><STRONG><a name="[4c0]"></a>__ai_math_dot_array</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, layers_rnn_generic_float.o(i.__ai_math_dot_array))
<BR><BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lstm_cell
</UL>

<P><STRONG><a name="[4bf]"></a>_lstm_cell</STRONG> (Thumb, 808 bytes, Stack size 432 bytes, layers_rnn_generic_float.o(i._lstm_cell))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = _lstm_cell
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ai_math_dot_array
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lstm
</UL>

<P><STRONG><a name="[f8]"></a>array_f32_identity</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, layers_rnn_generic_float.o(i.array_f32_identity))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = array_f32_identity &rArr; st_int8_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> layers_rnn_generic_float.o(i.forward_lstm)
</UL>
<P><STRONG><a name="[4cf]"></a>_ai_forward_layer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, layers.o(i._ai_forward_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ai_forward_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_forward_all
</UL>

<P><STRONG><a name="[4dd]"></a>__ai_math_dot_array</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, lite_dense_if32.o(i.__ai_math_dot_array))
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_dense_if32of32wf32
</UL>

<P><STRONG><a name="[4f2]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[4e4]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[186]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[70]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
